[{"path":"https://docs.ropensci.org/coder/articles/Interpret_regular_expressions.html","id":"visualize","dir":"Articles","previous_headings":"","what":"visualize()","title":"Interpret regular expressions","text":"graphical representation classcodes object created visualize(). showed default web browser (requires Internet connection; available within vignette). Visualization groups (comorbidity conditions) simultaneously might lead complex figures. can focus specific group (comorbidity) group argument. myocardial infarction codified regex_icd9cm_deyo?  Hence, ICD-9 codes starting 41 followed either 0 2 recognized myocardial infarction according icd9cm_deyo. corresponding regular expression ICD-10 :  codes start I2 followed either 1, 2 52. vertical bar | (regular expression heading) indicates logical “”. See ?regex details use regular expressions R (Perl-like versions currently allowed).","code":"visualize(charlson) visualize(charlson, \"myocardial infarction\", regex    = \"icd9cm_deyo\") visualize(charlson, \"myocardial infarction\", regex = \"icd10\")"},{"path":"https://docs.ropensci.org/coder/articles/Interpret_regular_expressions.html","id":"summary","dir":"Articles","previous_headings":"","what":"summary()","title":"Interpret regular expressions","text":"alternative representation list relevant codes identified regular expression. implemented summary() method classcodes objects. Note, however, regular expressions stand alone classcodes object. Hence, static look--tables map individual codes group. therefore need specify code list/dictionary possible codes recognized regular expressions. summary() categorize display result. Common code lists found decoder package accessed automatically coding argument summary(). Hence, “keyvalue” object icd10cm ICD-10-CM codes {decoder}: can use code list identify codes recognized charlson default classification based “icd10”. printed result (see ?print.summary.classcodes) tibble group comma separated code list. list code vectors (use programmatic purposes) also returned (invisible) accessed s$codes_vct. Now, compare result output based different code list, namely ICD-10-SE, Swedish version ICD-10, instead ICD-10-CM: noticeable differences. AIDS/HIV example one code deemed clinically relevant USA (thus included CM-version ICD-10), although 22 different codes potentially used Swedish national patient register. additional differences concerning fifth code position (digits ICD-10-CM characters ICD-10-SE). mark national modifications original ICD-10 codes, 4 positions (one character three digits). example, charlson$icd10 column based ICD-10-CM (Quan et al. 2005). comparison thus highlights potential differences using classification setting based another classification (data Swedish national patient register). interested another code version, example specified ICD-9-CM (Deyo, Cherkin, Ciol 1992) , can specified regex-argument passed cc_args argument set_classcodes function. Simultaneously, coding argument set icd9cmd match regular expressions disease part ICD-9-CM classification.","code":"head(decoder::icd10cm) #>     key                                              value #> 1  A000 Cholera due to Vibrio cholerae 01, biovar cholerae #> 2  A001    Cholera due to Vibrio cholerae 01, biovar eltor #> 3  A009                               Cholera, unspecified #> 4 A0100                         Typhoid fever, unspecified #> 5 A0101                                 Typhoid meningitis #> 6 A0102               Typhoid fever with heart involvement s <- summary(charlson, coding = \"icd10cm\") #> Classification based on: icd10 s #>  #> Summary of classcodes object #>  #> Recognized codes per group: #>  #> # A tibble: 17 × 3 #>    group                                n codes                                  #>    <chr>                            <int> <chr>                                  #>  1 AIDS/HIV                             1 B20                                    #>  2 cerebrovascular disease            430 G450, G451, G452, G453, G454, G458, G… #>  3 chronic pulmonary disease           69 I2781, I2782, I2783, I2789, I279, J40… #>  4 congestive heart failure            36 I099, I110, I130, I132, I255, I420, I… #>  5 dementia                            11 F0150, F0151, F0280, F0281, F0390, F0… #>  6 diabetes complication              204 E1021, E1022, E1029, E10311, E10319, … #>  7 diabetes without complication       52 E1010, E1011, E10610, E10618, E10620,… #>  8 hemiplegia or paraplegia            45 G041, G114, G801, G802, G8100, G8101,… #>  9 malignancy                         961 C000, C001, C002, C003, C004, C005, C… #> 10 metastatic solid tumor              47 C770, C771, C772, C773, C774, C775, C… #> 11 mild liver disease                  38 B180, B181, B182, B188, B189, K700, K… #> 12 moderate or severe liver disease    14 I8500, I8501, I864, K7040, K7041, K71… #> 13 myocardial infarction               18 I2101, I2102, I2109, I2111, I2119, I2… #> 14 peptic ulcer disease                36 K250, K251, K252, K253, K254, K255, K… #> 15 peripheral vascular disease        274 I700, I701, I70201, I70202, I70203, I… #> 16 renal disease                       28 I120, I1310, I1311, N032, N033, N034,… #> 17 rheumatic disease                  348 M0500, M05011, M05012, M05019, M05021… #>  #>  Use function visualize() for a graphical representation. summary(charlson, coding = \"icd10se\") #> Classification based on: icd10 #>  #> Summary of classcodes object #>  #> Recognized codes per group: #>  #> # A tibble: 17 × 3 #>    group                                n codes                                  #>    <chr>                            <int> <chr>                                  #>  1 AIDS/HIV                            22 B200, B201, B202, B203, B204, B205, B… #>  2 cerebrovascular disease             82 G450, G451, G452, G453, G454, G458, G… #>  3 chronic pulmonary disease           57 I278, I279, J409, J410, J411, J418, J… #>  4 congestive heart failure            19 I099, I110, I130, I132, I255, I420, I… #>  5 dementia                            23 F000, F001, F002, F009, F010, F011, F… #>  6 diabetes complication               71 E102, E102A, E102B, E102C, E102W, E10… #>  7 diabetes without complication       55 E100, E100A, E100B, E100C, E100D, E10… #>  8 hemiplegia or paraplegia            22 G041, G114, G801, G801A, G801B, G801X… #>  9 malignancy                         525 C000, C001, C002, C003, C004, C005, C… #> 10 metastatic solid tumor              29 C770, C771, C772, C773, C774, C775, C… #> 11 mild liver disease                  83 B180, B180A, B180B, B180C, B180D, B18… #> 12 moderate or severe liver disease    11 I850, I859, I864, I982, K704, K711, K… #> 13 myocardial infarction               15 I210, I211, I212, I213, I214, I214A, … #> 14 peptic ulcer disease                36 K250, K251, K252, K253, K254, K255, K… #> 15 peripheral vascular disease         43 I700, I700A, I700B, I700X, I701, I702… #> 16 renal disease                       27 I120, I131, N032, N033, N034, N035, N… #> 17 rheumatic disease                   63 M050, M051, M052, M053, M058, M058A, … #>  #>  Use function visualize() for a graphical representation. summary(   charlson, coding = \"icd9cmd\",   cc_args = list(regex = \"icd9cm_deyo\") ) #>  #> Summary of classcodes object #>  #> Recognized codes per group: #>  #> # A tibble: 17 × 3 #>    group                                n codes                                  #>    <chr>                            <int> <chr>                                  #>  1 AIDS/HIV                             1 042                                    #>  2 cerebrovascular disease             69 430, 431, 4320, 4321, 4329, 43300, 43… #>  3 chronic pulmonary disease            8 490, 500, 501, 502, 503, 504, 505, 50… #>  4 congestive heart failure            15 4280, 4281, 42820, 42821, 42822, 4282… #>  5 dementia                            14 2900, 29010, 29011, 29012, 29013, 290… #>  6 diabetes complication               12 25040, 25041, 25042, 25043, 25050, 25… #>  7 diabetes without complication       20 25000, 25001, 25002, 25003, 25010, 25… #>  8 hemiplegia or paraplegia            13 34200, 34201, 34202, 34210, 34211, 34… #>  9 malignancy                         628 1400, 1401, 1403, 1404, 1405, 1406, 1… #> 10 metastatic solid tumor              30 1960, 1961, 1962, 1963, 1965, 1966, 1… #> 11 mild liver disease                   7 5712, 57140, 57141, 57142, 57149, 571… #> 12 moderate or severe liver disease     6 4560, 4561, 5722, 5723, 5724, 5728     #> 13 myocardial infarction               31 41000, 41001, 41002, 41010, 41011, 41… #> 14 peptic ulcer disease                72 53100, 53101, 53110, 53111, 53120, 53… #> 15 peripheral vascular disease         15 44100, 44101, 44102, 44103, 4411, 441… #> 16 renal disease                       26 5820, 5821, 5822, 5824, 58281, 58289,… #> 17 rheumatic disease                    8 7100, 7101, 7104, 7140, 7141, 7142, 7… #>  #>  Use function visualize() for a graphical representation."},{"path":[]},{"path":"https://docs.ropensci.org/coder/articles/Interpret_regular_expressions.html","id":"codebook","dir":"Articles","previous_headings":"","what":"codebook()","title":"Interpret regular expressions","text":"Even individual codes summarized, might still hard interpret . decoder package can help translate codes readable names/description. facilitated codebook() function coder package. main purpose export Excel-file (path specified argument file). output otherwise list, including summary table (described ) tibble “all_codes” explaining meaning code. can compare codes recognized AIDS/HIV either ICD-10-CM ICD-10-SE:","code":"cm <- codebook(charlson, \"icd10cm\")$all_codes #> Classification based on: icd10 cm[cm$group == \"AIDS/HIV\", ] #> # A tibble: 1 × 3 #>   code  description                                group    #>   <chr> <chr>                                      <chr>    #> 1 B20   Human immunodeficiency virus [HIV] disease AIDS/HIV  se <- codebook(charlson, \"icd10se\")$all_codes #> Classification based on: icd10 se[se$group == \"AIDS/HIV\", ] #> # A tibble: 22 × 3 #>    code  description                                                      group  #>    <chr> <chr>                                                            <chr>  #>  1 B200  HIV-infektion med mykobakterieinfektion                          AIDS/… #>  2 B201  HIV-infektion med andra bakterieinfektioner                      AIDS/… #>  3 B202  HIV-infektion med cytomegalvirusinfektion                        AIDS/… #>  4 B203  HIV-infektion med andra virusinfektioner                         AIDS/… #>  5 B204  HIV-infektion med candidainfektion                               AIDS/… #>  6 B205  HIV-infektion med andra mykoser                                  AIDS/… #>  7 B206  HIV-infektion med Pneumocystis jirovecii (carinii)-pneumoni      AIDS/… #>  8 B207  HIV-infektion med multipla infektioner                           AIDS/… #>  9 B208  HIV-infektion med andra infektions- och parasitsjukdomar         AIDS/… #> 10 B209  HIV-infektion med ospecificerad infektions- eller parasitsjukdom AIDS/… #> # ℹ 12 more rows"},{"path":"https://docs.ropensci.org/coder/articles/Interpret_regular_expressions.html","id":"codebooks","dir":"Articles","previous_headings":"","what":"codebooks()","title":"Interpret regular expressions","text":"Several codebooks can combined (exported single Excel-file) function codebooks() (note plural s). difficult illustrate vignette examples provided ?codebooks","code":""},{"path":[]},{"path":"https://docs.ropensci.org/coder/articles/classcodes.html","id":"motivating-example","dir":"Articles","previous_headings":"","what":"Motivating example","title":"Classcodes","text":"Let’s consider example data (ex_peopple ex_icd10) vignette(\"ex_data\"). Let’s categorize patients Charlson comorbidity: , charlson (supplied cc argument) “classcodes” object containing classification scheme. specification match ex_icd10$icd10 condition recognized Charlson comorbidity classification. based regular expressions (see ?regex).","code":"categorize(ex_people, codedata = ex_icd10, cc = charlson, id = \"name\", code = \"icd10\") #> Classification based on: icd10 #> # A tibble: 100 × 25 #>    name              surgery    myocardial.infarction congestive.heart.failure #>    <chr>             <date>     <lgl>                 <lgl>                    #>  1 Chen, Trevor      2025-04-21 FALSE                 FALSE                    #>  2 Graves, Acineth   2025-01-11 FALSE                 FALSE                    #>  3 Trujillo, Yanelly 2024-12-29 FALSE                 FALSE                    #>  4 Simpson, Kenneth  2025-04-02 FALSE                 FALSE                    #>  5 Chin, Nelson      2025-03-16 FALSE                 FALSE                    #>  6 Le, Christina     2024-10-18 FALSE                 FALSE                    #>  7 Kang, Xuan        2025-01-20 FALSE                 FALSE                    #>  8 Shuemaker, Lauren 2024-10-19 FALSE                 FALSE                    #>  9 Boucher, Teresa   2025-03-27 FALSE                 FALSE                    #> 10 Le, Soraiya       2025-03-01 FALSE                 FALSE                    #> # ℹ 90 more rows #> # ℹ 21 more variables: peripheral.vascular.disease <lgl>, #> #   cerebrovascular.disease <lgl>, dementia <lgl>, #> #   chronic.pulmonary.disease <lgl>, rheumatic.disease <lgl>, #> #   peptic.ulcer.disease <lgl>, mild.liver.disease <lgl>, #> #   diabetes.without.complication <lgl>, hemiplegia.or.paraplegia <lgl>, #> #   renal.disease <lgl>, diabetes.complication <lgl>, malignancy <lgl>, …"},{"path":"https://docs.ropensci.org/coder/articles/classcodes.html","id":"default-classcodes","dir":"Articles","previous_headings":"","what":"Default classcodes","title":"Classcodes","text":"7 default “classcodes” objects package (classcodes column ). might several versions regular expressions (column regex) weighted indices (column indices):","code":"all_classcodes() #> # A tibble: 7 × 3 #>   classcodes    regex                                                    indices #>   <chr>         <chr>                                                    <chr>   #> 1 charlson      icd10, icd9cm_deyo, icd9cm_enhanced, icd10_rcs, icd10_s… \"charl… #> 2 cps           icd10                                                    \"only_… #> 3 elixhauser    icd10, icd10_short, icd9cm, icd9cm_ahrqweb, icd9cm_enha… \"sum_a… #> 4 hip_ae        icd10, kva, icd10_fracture                               \"\"      #> 5 hip_ae_hailer icd10, kva                                               \"\"      #> 6 knee_ae       icd10, kva                                               \"\"      #> 7 rxriskv       atc_pratt, atc_caughey, atc_garland                      \"pratt…"},{"path":"https://docs.ropensci.org/coder/articles/classcodes.html","id":"classcodes-object","dir":"Articles","previous_headings":"","what":"classcodes object","title":"Classcodes","text":"classcodes objects documented (see example ?charlson). objects basically tibbles (data frames) additional attributes: Columns pre-specified names /content: group: short descriptive names groups classify (.e. medical conditions/comorbidities Charlson case) description: (optional) details describing group regular expressions identifying group (see vignette(\"Interpret_regular_expressions\") details ?charlson concrete examples). Multiple versions might used combined different code sets (.e. ICD-9 versus ICD-10) suggested different sources/authors. (Column names arbitrary identified attr(., \"regexprs\") specified argument regex .classcodes()). numeric vectors used weights calculating index sums based (subset ) individual groups. (Column names arbitrary identified attr(., \"indices\") specified argument indices .classcodes().) condition: (optional) conditional classification (used charlson see example ). example , specify version regular expressions use. see printed output (attr(charlson, \"regexprs\")), first regular expression “icd10”. used default. ICD-10 codes recorded code data set (ex_icd10$icd10). might therefore use either “icd10” alternative “icd10_rcs”. versions might relevant medical data coded codes (earlier versions ICD). show alter setting practice.","code":"charlson #>  #> Classcodes object #>   #> Regular expressions: #>    icd10, icd9cm_deyo, icd9cm_enhanced, icd10_rcs, icd10_swe, icd8_brusselaers, icd9_brusselaers  #> Indices: #>    charlson, deyo_ramano, dhoore, ghali, quan_original, quan_updated    #>  #> # A tibble: 17 × 15 #>    group       description icd10 icd9cm_deyo icd9cm_enhanced icd10_rcs icd10_swe #>    <chr>       <chr>       <chr> <chr>       <chr>           <chr>     <chr>     #>  1 myocardial… Acute myoc… I2([… 41[02]      41[02]          \"I2([1-3… I2([12]|… #>  2 congestive… Heart fail… I(09… 428         39891|4(0(2([0… \"I(1[13]… I((1(1[1… #>  3 peripheral… Peripheral… I7([… 44(39|1)|7… 0930|4(373|4[0… \"(I7([0-… (I7([01]… #>  4 cerebrovas… Cerebrovas… G4[5… 43[0-8]     36234|43[0-8]   \"G4[56]|… G45|I6[0… #>  5 dementia    Senile and… F0([… 290         29(0|41)|3312   \"A810|F0… F0([0-3]… #>  6 chronic pu… Chronic ob… (I27… 490|50([0-… 4(16[89]|9)|50… \"(I2[67]… J(4[1-7]… #>  7 rheumatic … Systemic l… M(0[… 7(1(0[014]… 4465|7(1(0[0-4… \"M(0[569… M(0([568… #>  8 peptic ulc… Gastric, d… K2[5… 53[1-4]     53[1-4]          NA       K2[5-8]   #>  9 mild liver… Alcoholic … B18|… 571[24-6]   070([23]{2}|[4…  NA       B1[5-9]|… #> 10 diabetes w… Diabetes w… E1[0… 250[0-37]   250[0-389]       NA       E1([0-4]… #> 11 hemiplegia… Paraplegia… G(04… 34(41|2)    3(341|4([23]|4… \"G(114|8… G(114|8(… #> 12 renal dise… Chronic gl… I1(2… 58([2568]|… 40(3([019]1)|4… \"I1[23]|… I1(20|31… #> 13 diabetes c… Diabetes w… E1[0… 250[4-6]    250[4-7]        \"E1[0-4]\" E1(0[2-5… #> 14 malignancy  Malignant … C([0… (1([4-68]|… 1([4-68]|7[0-2… \"C([01]|… C([0-36]… #> 15 moderate o… Hepatic co… I(8(… 456[01]|57… 456[0-2]|572[2… \"B18|I(8… I((85[09… #> 16 metastatic… Secondary … C(7[… 19([6-8]|9… 19[6-9]         \"C(7[7-9… C(7[789]… #> 17 AIDS/HIV    HIV infect… B2[0… 04[2-4]     04[2-4]         \"B2[0-4]\" B2[0-4]|… #> # ℹ 8 more variables: icd8_brusselaers <chr>, icd9_brusselaers <chr>, #> #   charlson <dbl>, deyo_ramano <dbl>, dhoore <dbl>, ghali <dbl>, #> #   quan_original <dbl>, quan_updated <dbl>"},{"path":"https://docs.ropensci.org/coder/articles/classcodes.html","id":"hierarchy","dir":"Articles","previous_headings":"","what":"Hierarchy","title":"Classcodes","text":"classcodes objects additional class attribute “hierarchy”, controlling hierarchical groups one possibly several groups used weighted index sums. classcodes object Elixhauser comorbidity classification property: means patients metastatic cancer solid tumors recognized classified. patient assigned aggregated index score, however, largest score used (case metastatic cancer superior solid tumor). true patients diagnosed uncomplicated complicated diabetes. Consider patient Alice diagnoses: According Elixhauser, poor Alice solid tumor metastatic cancer, well diabetes without complications. (unweighted) index “sum_all”, however equal 4 2, since metastatic cancer diabetes complications subsume solid tumors diabetes without complications.","code":"print(elixhauser, n = 0) # preview 0 rows but present the attributes #>  #> Classcodes object #>   #> Regular expressions: #>    icd10, icd10_short, icd9cm, icd9cm_ahrqweb, icd9cm_enhanced  #> Indices: #>    sum_all, sum_all_ahrq, walraven, sid29, sid30, ahrq_mort, ahrq_readm  #> Hierarchy: #>    c(\"metastatic cancer\", \"solid tumor\"), #>    c(\"diabetes uncomplicated\", \"diabetes complicated\") pat <- tibble::tibble(id = \"Alice\") diags <- c(\"C01\", \"C801\", \"E1010\", \"E1021\") decoder::decode(diags, decoder::icd10cm) #> [1] \"Malignant neoplasm of base of tongue\"                    #> [2] \"Malignant (primary) neoplasm, unspecified\"               #> [3] \"Type 1 diabetes mellitus with ketoacidosis without coma\" #> [4] \"Type 1 diabetes mellitus with diabetic nephropathy\" icd10 <- tibble::tibble(id = \"Alice\", icd10 = diags) x <- categorize(pat, codedata = icd10, cc = elixhauser,                  id = \"id\", code = \"icd10\", index = \"sum_all\", check.names = FALSE) #> Classification based on: icd10 t(x) #>                                [,1]    #> id                             \"Alice\" #> congestive heart failure       \"FALSE\" #> cardiac arrhythmias            \"FALSE\" #> valvular disease               \"FALSE\" #> pulmonary circulation disorder \"FALSE\" #> peripheral vascular disorder   \"FALSE\" #> hypertension uncomplicated     \"FALSE\" #> hypertension complicated       \"FALSE\" #> paralysis                      \"FALSE\" #> other neurological disorders   \"FALSE\" #> chronic pulmonary disease      \"FALSE\" #> diabetes uncomplicated         \"TRUE\"  #> diabetes complicated           \"TRUE\"  #> hypothyroidism                 \"FALSE\" #> renal failure                  \"FALSE\" #> liver disease                  \"FALSE\" #> peptic ulcer disease           \"FALSE\" #> AIDS/HIV                       \"FALSE\" #> lymphoma                       \"FALSE\" #> metastatic cancer              \"TRUE\"  #> solid tumor                    \"TRUE\"  #> rheumatoid arthritis           \"FALSE\" #> coagulopathy                   \"FALSE\" #> obesity                        \"FALSE\" #> weight loss                    \"FALSE\" #> fluid electrolyte disorders    \"FALSE\" #> blood loss anemia              \"FALSE\" #> deficiency anemia              \"FALSE\" #> alcohol abuse                  \"FALSE\" #> drug abuse                     \"FALSE\" #> psychoses                      \"FALSE\" #> depression                     \"FALSE\" #> sum_all                        \"2\""},{"path":"https://docs.ropensci.org/coder/articles/classcodes.html","id":"conditions","dir":"Articles","previous_headings":"","what":"Conditions","title":"Classcodes","text":"Consider Alice . Suppose got THA surgical procedure codes recorded hospital visits either , index surgery. codes recorded Nomesco classification surgical procedures (also known KVA codes Swedish). , “post_op” indicates whether code recorded surgery . information always accessible pure date stamps (, approach illustrated vignette(\"coder\") used instead). Thus, “post_op” column Boolean/logical vector name recognized “condition” column hip_ae, classcodes object used identify adverse events THA (use set_classcodes() explained used since hip_ae includes codes ICD NOMESCO/KVA). code nomesco$kva recognized adverse events 1) code matched relevant regular expression, 2) extra condition (nomesco$post_op) TRUE. need specify codes based regular expressions matching NOMESCO codes. regex argument passed set_classcodes() cc_args argument. data set (nomesco), “AA01” recorded surgery indicate potential adverse event. “NFC01” potential adverse event recorded already surgery. Therefore, adverse event recognized case.","code":"nomesco <-    tibble::tibble(     id      = \"Alice\",     kva     = c(\"AA01\", \"NFC01\"),     post_op = c(TRUE, FALSE)   ) set_classcodes(hip_ae, regex = \"kva\") #>  #> Classcodes object #>   #> Regular expressions: #>    kva  #> Indices: #>        #>  #> # A tibble: 1 × 3 #>   group kva                                                            condition #>   <chr> <chr>                                                          <chr>     #> 1 KVA   ^(NF([CF-HJ-MS-TW]|A(02|1[12]|2[0-2])|Q09|U[013489]9)|QD(A10|… post_op categorize(pat, codedata = nomesco, cc = hip_ae, id = \"id\", code = \"kva\",            cc_args = list(regex = \"kva\")) #> index calculated as number of relevant categories #> # A tibble: 1 × 3 #>   id    KVA   index #>   <chr> <lgl> <dbl> #> 1 Alice FALSE     0"},{"path":"https://docs.ropensci.org/coder/articles/classcodes.html","id":"use-classcodes-objects","dir":"Articles","previous_headings":"","what":"Use classcodes objects","title":"Classcodes","text":"functions use classcodes object , modified version passed set_classcodes(). function can called directly often invoked arguments passed cc_args argument used functions (example ).","code":""},{"path":"https://docs.ropensci.org/coder/articles/classcodes.html","id":"explicit-use-of-set_classcodes","dir":"Articles","previous_headings":"Use classcodes objects","what":"Explicit use of set_classcodes()","title":"Classcodes","text":"might use set_classcodes() prepare classification scheme according Charlson comorbidity index based ICD-8 (Brusselaers Lagergren 2017). Assume codes might found character strings leading prefixes middle verbatim description. controlled setting argument start = FALSE, meaning identified ICD-8 codes need appear beginning character string. might assume, however, information code (specified stop = TRUE). can also use specific unique group names specified tech_names. resulting object one version regular expressions (icd8_brusselaers specified). regular expression suffixed $ (due stop = TRUE). Group names might seem cumbersome help distinguish column names added categorize() function run repeatedly different classcodes (.e. calculate Charlson Elixhauser indices patients). original charlson object 17 rows, charlson_icd8 13, since groups used version. Note index columns remain tibble. thus possible combine categorization index, although combinations might preferred (regex_icd9cm_deyo combined index_deyo_ramano). can now use charlson_icd8 classification: ICD-8 code 410is recognized () myocardial infarction.","code":"charlson_icd8 <-    set_classcodes(     \"charlson\",     regex      = \"icd8_brusselaers\", # Version based on ICD-8     start      = FALSE, # Codes do not have to occur in the beginning of a vector     stop       = TRUE,  # Code vector must end with the specified codes     tech_names = TRUE   # Use long but unique and descriptive variable names   ) charlson_icd8 #>  #> Classcodes object #>   #> Regular expressions: #>    icd8_brusselaers  #> Indices: #>    charlson, deyo_ramano, dhoore, ghali, quan_original, quan_updated    #>  #> # A tibble: 13 × 9 #>    group          description icd8_brusselaers charlson deyo_ramano dhoore ghali #>    <chr>          <chr>       <chr>               <dbl>       <dbl>  <dbl> <dbl> #>  1 charlson_icd8… Acute myoc… (41[0-2])$              1           1      1     1 #>  2 charlson_icd8… Heart fail… (4270|428)$             1           1      1     4 #>  3 charlson_icd8… Peripheral… (44[0-5])$              1           1      1     2 #>  4 charlson_icd8… Cerebrovas… (43[0-8])$              1           1      1     1 #>  5 charlson_icd8… Senile and… (290[01])$              1           1      1     0 #>  6 charlson_icd8… Chronic ob… (49[0-3]|51[5-8…        1           1      1     0 #>  7 charlson_icd8… Systemic l… (7(1[0-2]|34))$         1           1      1     0 #>  8 charlson_icd8… Paraplegia… (344)$                  2           1      1     0 #>  9 charlson_icd8… Chronic gl… (40[34]|58[0-3]…        2           1      1     3 #> 10 charlson_icd8… Diabetes w… (250)$                  2           1      1     0 #> 11 charlson_icd8… Malignant … (1([4-68][0-9]|…        2           1      1     0 #> 12 charlson_icd8… Hepatic co… (070|4560|51[1-…        3           1      1     0 #> 13 charlson_icd8… Secondary … (19[6-9])$              6           1      1     0 #> # ℹ 2 more variables: quan_original <dbl>, quan_updated <dbl> classify(410, charlson_icd8) #> Classification based on: icd8_brusselaers #>  #> The printed data is of class: classified, matrix. #> It has 1 row(s). #> It is here previewed as a tibble #> Use `print(x, n = NULL)` to print as is (or use `n` to specify the number of rows to preview)! #>  #> # A tibble: 1 × 13 #>   charlson_icd8_brusselaers_myoc…¹ charlson_icd8_brusse…² charlson_icd8_brusse…³ #>   <lgl>                            <lgl>                  <lgl>                  #> 1 TRUE                             FALSE                  FALSE                  #> # ℹ abbreviated names: ¹​charlson_icd8_brusselaers_myocardial_infarction, #> #   ²​charlson_icd8_brusselaers_congestive_heart_failure, #> #   ³​charlson_icd8_brusselaers_peripheral_vascular_disease #> # ℹ 10 more variables: charlson_icd8_brusselaers_cerebrovascular_disease <lgl>, #> #   charlson_icd8_brusselaers_dementia <lgl>, #> #   charlson_icd8_brusselaers_chronic_pulmonary_disease <lgl>, #> #   charlson_icd8_brusselaers_rheumatic_disease <lgl>, …"},{"path":"https://docs.ropensci.org/coder/articles/classcodes.html","id":"implicit-use-of-set_classcodes","dir":"Articles","previous_headings":"Use classcodes objects","what":"Implicit use of set_classcodes()","title":"Classcodes","text":"Instead pre-specifying charlson_icd8, similar result achieved :","code":"classify(   410,   \"charlson\",   cc_args = list(     regex      = \"icd8_brusselaers\",      start      = FALSE,      stop       = TRUE,     tech_names = TRUE   ) ) #>  #> The printed data is of class: classified, matrix. #> It has 1 row(s). #> It is here previewed as a tibble #> Use `print(x, n = NULL)` to print as is (or use `n` to specify the number of rows to preview)! #>  #> # A tibble: 1 × 13 #>   charlson_icd8_brusselaers_myoc…¹ charlson_icd8_brusse…² charlson_icd8_brusse…³ #>   <lgl>                            <lgl>                  <lgl>                  #> 1 TRUE                             FALSE                  FALSE                  #> # ℹ abbreviated names: ¹​charlson_icd8_brusselaers_myocardial_infarction, #> #   ²​charlson_icd8_brusselaers_congestive_heart_failure, #> #   ³​charlson_icd8_brusselaers_peripheral_vascular_disease #> # ℹ 10 more variables: charlson_icd8_brusselaers_cerebrovascular_disease <lgl>, #> #   charlson_icd8_brusselaers_dementia <lgl>, #> #   charlson_icd8_brusselaers_chronic_pulmonary_disease <lgl>, #> #   charlson_icd8_brusselaers_rheumatic_disease <lgl>, …"},{"path":[]},{"path":"https://docs.ropensci.org/coder/articles/coder.html","id":"triad-of-objects","dir":"Articles","previous_headings":"","what":"Triad of objects","title":"coder","text":"Functions package relies triad objects: Case data unit id:s possible dates interest External code data corresponding units (1) optional dates interest classification scheme (‘classcodes’ object) regular expressions identify categorize relevant codes (2). easy introduce new classification schemes (‘classcodes’ objects) use default schemes included package (see vignette(\"classcodes\")).","code":""},{"path":"https://docs.ropensci.org/coder/articles/coder.html","id":"triad-of-functions","dir":"Articles","previous_headings":"","what":"Triad of functions","title":"coder","text":"three important functions control intended work flow package: codify() merge object (1) (2) coded data set intended format. optional dates specified, used construct time windows order filter important dates (.e. comorbidity one year surgery adverse events 90 days ). classify() use coded data classify using classcodes object (3) (.e. code comorbidity data Charlson Elixhauser comorbidity classifications). index() third optional step summarize individual classcodes categories (possibly weighted) index sum coded item (.e. calculate Charlson comorbidity index patient). steps performed explicitly codify() %>% classify() %>% index() implicitly main function categorize() combining steps automatically.","code":""},{"path":"https://docs.ropensci.org/coder/articles/coder.html","id":"use-case","dir":"Articles","previous_headings":"","what":"Use case","title":"coder","text":"typical use case coder package consider patient data comorbidity described package readme. concept comorbidity often attributed Feinstein (1970): [T]term co-morbidity refer distinct additional clinical entity existed may occur clinical course patient index disease study. Let’s consider group patients THA, identified national quality register, might large size. Assume interested patients’ pre-surgery comorbidity, captured quality register . Instead, data might codified secondary source, national patient register containing hospital visits admissions several years, THA-surgery. hospital visit/admission might recorded one several medical codes, example using International classification diseases version 10 (ICD-10). Similarly, medical prescription register might hold records prescribed drugs corresponding codes Anatomic therapeutic chemical classification (ATC) system. Thus, combining primary secondary data sets (objects 1-2 ) using unique patient id, possible time window (.e. consider comorbidity recorded one year THA), first step identify patient comorbidity. step performed codify() function step () . now gathered relevant codes patient. Common classifications (.e. ICD-10 ATC) wast, however, including tens thousands medical/chemical codes, cumbersome impractical use directly. therefore common categorize codes broader categories (.e. Charlson, Elixhauser RxRisk V classifications ). classification simple code matching problem using look-table. generally slow, cumbersome error-prone process, however. therefore recommend use regular expression compact code representation, well computationally faster procedure. implemented classify() function step (ii) . now reduced data tens thousands codes perhaps 10-50 combined categories. might sufficient cases, although simplifications might also needed. thus common simplify comorbidity single number, index score, sum individual comorbidities, possible weighted differentiate serious conditions trivial. Different weights might relevance different circumstances different fields. implemented index() function step (iii) .","code":""},{"path":"https://docs.ropensci.org/coder/articles/coder.html","id":"charlson-and-elixhauser","dir":"Articles","previous_headings":"","what":"Charlson and Elixhauser","title":"coder","text":"Charlson (1987) Elixhauser (1998) comorbidity indices two examples used medical research. index consist several medical conditions, possibly summarized (weighted) index. condition defined set medical codes (Quan et al. 2005). Different versions International Classification Diseases (ICD) codes often used. coder package provides substantial functionality Charlson Elixhauser, although focus indices (see examples vignette(\"classcodes\")). Several R packages functions Charlson Elixhauser: icd (CRAN) comorbidity (CRAN) medicalrisk (CRAN) comorbidities.icd10 (GitHub) icdcoder (GitHub) icd comorbidity good packages well suited purpose based effective implementations. medicalrisk can used ICD-9-CM codes --date latest version ICD-10. comorbidities.icd10 icdcoder actively developed maintained. One advantage coder package great flexibility combining different sets codes (ICD-8, ICD-9, ICD-9-CM ICD-10 et cetera), different weighted indices.","code":""},{"path":"https://docs.ropensci.org/coder/articles/coder.html","id":"risk-rx-v","dir":"Articles","previous_headings":"","what":"Risk Rx V","title":"coder","text":"Another advantage coder package inclusion additional classifications (see ?all_classcodes()), pharmacy-based case-mix instrument Rx Risk V (Sloan et al. 2003). use classification example. classification, contrast Charlson Elixhauser, relies medical prescription data codified Anatomic Therapeutic Chemical classification system (ATC). classcodes objects package, additional information references found object documentation (?rxriskv).","code":""},{"path":"https://docs.ropensci.org/coder/articles/coder.html","id":"concrete-example","dir":"Articles","previous_headings":"","what":"Concrete example","title":"coder","text":"Let us consider hypothetical setting using example data (ex_peopple ex_atc) described vignette(\"ex_data\").","code":""},{"path":"https://docs.ropensci.org/coder/articles/coder.html","id":"default-categorization","dir":"Articles","previous_headings":"","what":"Default categorization","title":"coder","text":"first attempt calculate Rx Risk V score patient: first two columns identical ex_people. Additional columns indicate whether patients individual comorbidities identified Rx Risk V. Patients without medical prescriptions NA values (might substituted FALSE). last columns contain summarized index values (weighted sums individual comorbidities). Let’s summarize distribution weighted index according pratt (Pratt et al. 2018):","code":"default <- categorize(     ex_people, codedata = ex_atc, cc = rxriskv, id = \"name\", code = \"atc\") #> Classification based on: atc_pratt default #> # A tibble: 100 × 50 #>    name     surgery    Alcohol.dependence Allergies Anticoagulants Antiplatelets #>    <chr>    <date>     <lgl>              <lgl>     <lgl>          <lgl>         #>  1 Chen, T… 2025-04-21 FALSE              TRUE      TRUE           FALSE         #>  2 Graves,… 2025-01-11 FALSE              FALSE     FALSE          FALSE         #>  3 Trujill… 2024-12-29 FALSE              FALSE     FALSE          FALSE         #>  4 Simpson… 2025-04-02 FALSE              TRUE      FALSE          FALSE         #>  5 Chin, N… 2025-03-16 FALSE              FALSE     FALSE          TRUE          #>  6 Le, Chr… 2024-10-18 FALSE              FALSE     FALSE          FALSE         #>  7 Kang, X… 2025-01-20 FALSE              TRUE      FALSE          TRUE          #>  8 Shuemak… 2024-10-19 FALSE              FALSE     FALSE          FALSE         #>  9 Boucher… 2025-03-27 FALSE              FALSE     FALSE          FALSE         #> 10 Le, Sor… 2025-03-01 FALSE              FALSE     FALSE          FALSE         #> # ℹ 90 more rows #> # ℹ 44 more variables: Anxiety <lgl>, Arrhythmia <lgl>, #> #   Benign.prostatic.hyperplasia <lgl>, Bipolar.disorder <lgl>, #> #   Chronic.airways.disease <lgl>, Congestive.heart.failure <lgl>, #> #   Dementia <lgl>, Depression <lgl>, Diabetes <lgl>, Epilepsy <lgl>, #> #   Gastrooesophageal.reflux.disease <lgl>, Glaucoma <lgl>, Gout <lgl>, #> #   Hepatitis.B <lgl>, Hepatitis.C <lgl>, HIV <lgl>, Hyperkalaemia <lgl>, … hist2 <- function(x) {   hist(x$pratt, main = NULL, xlab = \"RxRisk V\", col = \"lightblue\") } hist2(default)"},{"path":"https://docs.ropensci.org/coder/articles/coder.html","id":"specified-time-window","dir":"Articles","previous_headings":"","what":"Specified time-window","title":"coder","text":"prescriptions might filed long surgery, even . codes less relevant comorbidities present surgery. can limit categorization time window one year (365 days) prior surgery. done internally codify() function, hence specifying list arguments passed function:","code":"codify_args <-    list(date = \"surgery\", code_date = \"prescription\", days = c(-365, -1))  ct <-    categorize(     ex_people,      codedata    = ex_atc,      cc          = rxriskv,      id          = \"name\",      code        = \"atc\",      codify_args = codify_args   ) #> Classification based on: atc_pratt    hist2(ct)"},{"path":"https://docs.ropensci.org/coder/articles/coder.html","id":"alternative-classification","dir":"Articles","previous_headings":"","what":"Alternative classification","title":"coder","text":"Comorbidities identified ATC codes captured regular expression (see vignette(\"classcodes\") vignette(\"Intrpret_regular_expressions\")). Codes identified atc_pratt used default. Let’s use alternative version adopted Caughy (2010) specified argument passed cc_args argument.","code":"hist2(   categorize(     ex_people,      codedata      = ex_atc,      cc            = rxriskv,      id            = \"name\",      code          = \"atc\",     codify_args   = codify_args,     cc_args       = list(regex = \"caughey\")   ) )"},{"path":"https://docs.ropensci.org/coder/articles/coder.html","id":"specified-index","dir":"Articles","previous_headings":"","what":"Specified index","title":"coder","text":"specify calculate weighted index sum , wherefore available indices provided default. might go back Pratt’s classification scheme (atc_pratt) calculate corresponding index pratt. Let´s also perform three computational steps explicitly instead using combining categorize() function tabulate result","code":"codify(   ex_people,    ex_atc,    id        = \"name\",    code      = \"atc\",     date      = \"surgery\",    code_date = \"prescription\",   days      = c(-365, -1) ) %>%    classify(rxriskv) %>%    index(\"pratt\") %>%    table() #> Warning: 'classify()' does not preserve row order ('categorize()' does!) #> Classification based on: atc_pratt #> . #> -1  0  1  2  3  4  5  8  #> 12 43  8 21  1  2  1  2"},{"path":"https://docs.ropensci.org/coder/articles/coder.html","id":"dirty-code-data","dir":"Articles","previous_headings":"","what":"Dirty code data","title":"coder","text":"Let’s assume code data clean simulated . Thus, codes recognized (every one got index = 0). default, codes recognized found immediate corresponding column. can controlled arguments start stop specified via cc_args. can also ignore non alphanumeric characters setting alnum = TRUE passed codify() argument codify_args.","code":"s <- function(x) sample(x, 1e3, replace = TRUE)  ex_atc$code <-    paste0(     s(letters), s(0:9), s(letters), s(c(\".\", \"-\", \"?\")),      ex_atc$atc, s(letters), s(0:9)   )  ex_atc #> # A tibble: 10,000 × 4 #>    name                 atc      prescription code           #>    <chr>                <chr>    <date>       <chr>          #>  1 Le, Soraiya          L03AA16  2023-01-23   m5g.L03AA16h7  #>  2 Cleveland, Mark      J07CA01  2020-10-02   w3p.J07CA01m1  #>  3 Santistevan, Charlie QJ57EA06 2016-03-13   l3d.QJ57EA06f2 #>  4 Meier, Hayden        R03DB04  2021-07-14   e8o-R03DB04s5  #>  5 Hill, Audrey         V09IA01  2018-12-27   f3s.V09IA01s1  #>  6 Thumma, Phillip      L02AE02  2015-02-04   o8j?L02AE02t3  #>  7 Yost, Rebecca        S01EB06  2019-06-29   o8j?S01EB06r7  #>  8 Mandakh, Joseph      A03DA01  2021-01-30   d7w-A03DA01k8  #>  9 Meier, Hayden        C09AA13  2023-07-22   f3n-C09AA13m5  #> 10 Trinh, Schuyler      A07EA03  2025-05-21   i7r?A07EA03n8  #> # ℹ 9,990 more rows  sum(   categorize(     ex_people,      codedata = ex_atc,      cc       = rxriskv,      id       = \"name\",     code     = \"code\"   )$pratt,   na.rm      = TRUE ) #> Classification based on: atc_pratt #> [1] 0 hist2(   categorize(     ex_people,      codedata = ex_atc,      cc       = rxriskv,      id       = \"name\",     code     = \"code\",     cc_args  = list(       start  = FALSE,        stop   = FALSE     ),     codify_args = list(       alnum = TRUE     )   ) ) #> Classification based on: atc_pratt"},{"path":[]},{"path":"https://docs.ropensci.org/coder/articles/ex_data.html","id":"patients","dir":"Articles","previous_headings":"","what":"Patients","title":"Example data","text":"ex_people contains 100 patients (random names randomNames package) received total hip arthroplasty (THA) surgery given (random) dates (surgery column). data represent sample national quality register. See also ?ex_people.","code":"ex_people #> # A tibble: 100 × 2 #>    name              surgery    #>    <chr>             <date>     #>  1 Chen, Trevor      2025-04-21 #>  2 Graves, Acineth   2025-01-11 #>  3 Trujillo, Yanelly 2024-12-29 #>  4 Simpson, Kenneth  2025-04-02 #>  5 Chin, Nelson      2025-03-16 #>  6 Le, Christina     2024-10-18 #>  7 Kang, Xuan        2025-01-20 #>  8 Shuemaker, Lauren 2024-10-19 #>  9 Boucher, Teresa   2025-03-27 #> 10 Le, Soraiya       2025-03-01 #> # ℹ 90 more rows"},{"path":"https://docs.ropensci.org/coder/articles/ex_data.html","id":"diagnoses-data","dir":"Articles","previous_headings":"","what":"Diagnoses data","title":"Example data","text":"interested comorbidity patients collected synthesized diagnostics data (ex_icd10) national patient register (can least assume now). Patients one entry every combination recorded diagnoses codes according International classification diseases version 10, icd10, corresponding dates hospital admissions codes recorded. (Column hdia TRUE main diagnoses FALSE underlying/less relevant codes). See also ?ex_icd10.","code":"ex_icd10 #> # A tibble: 2,376 × 4 #>    name                 admission  icd10 hdia  #>    <chr>                <date>     <chr> <lgl> #>  1 Tran, Kenneth        2024-11-02 S134A FALSE #>  2 Tran, Kenneth        2025-04-18 W3319 FALSE #>  3 Tran, Kenneth        2025-03-28 Y0262 TRUE  #>  4 Tran, Kenneth        2025-02-18 X0488 FALSE #>  5 Sommerville, Dominic 2025-04-09 V8104 FALSE #>  6 Sommerville, Dominic 2024-11-18 B853  FALSE #>  7 Sommerville, Dominic 2025-04-04 Q174  FALSE #>  8 Sommerville, Dominic 2024-11-23 A227  FALSE #>  9 Sommerville, Dominic 2025-03-30 H702  FALSE #> 10 Sommerville, Dominic 2024-07-22 X6051 TRUE  #> # ℹ 2,366 more rows"},{"path":"https://docs.ropensci.org/coder/articles/ex_data.html","id":"medical-data","dir":"Articles","previous_headings":"","what":"Medical data","title":"Example data","text":"Assume external code data national prescription register. register likely cover additional patients let’s just consider small sample ATC codes patients , patient can zero, one, several codes prescribed different dates.","code":"ex_atc #> # A tibble: 10,000 × 3 #>    name                 atc      prescription #>    <chr>                <chr>    <date>       #>  1 Le, Soraiya          L03AA16  2023-01-23   #>  2 Cleveland, Mark      J07CA01  2020-10-02   #>  3 Santistevan, Charlie QJ57EA06 2016-03-13   #>  4 Meier, Hayden        R03DB04  2021-07-14   #>  5 Hill, Audrey         V09IA01  2018-12-27   #>  6 Thumma, Phillip      L02AE02  2015-02-04   #>  7 Yost, Rebecca        S01EB06  2019-06-29   #>  8 Mandakh, Joseph      A03DA01  2021-01-30   #>  9 Meier, Hayden        C09AA13  2023-07-22   #> 10 Trinh, Schuyler      A07EA03  2025-05-21   #> # ℹ 9,990 more rows"},{"path":"https://docs.ropensci.org/coder/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Erik Bulow. Author, maintainer. Emely C Zabore. Reviewer.           Emily reviewed package (v. 0.12.1) rOpenSci, see <https://github.com/ropensci/software-review/issues/381> David Robinson. Reviewer.           David reviewed package (v. 0.12.1) rOpenSci, see <https://github.com/ropensci/software-review/issues/381>","code":""},{"path":"https://docs.ropensci.org/coder/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Bulow E (2025). coder: Deterministic Categorization Items Based External Code Data. R package version 1.0, https://docs.ropensci.org/coder/.","code":"@Manual{,   title = {coder: Deterministic Categorization of Items Based on External Code Data},   author = {Erik Bulow},   year = {2025},   note = {R package version 1.0},   url = {https://docs.ropensci.org/coder/}, }"},{"path":[]},{"path":"https://docs.ropensci.org/coder/index.html","id":"aim-of-the-package","dir":"","previous_headings":"","what":"Aim of the package","title":"Deterministic Categorization of Items Based on External Code Data","text":"goal coder classify items one dataset, using codes secondary source classification schemes based regular expressions weighted indices.","code":""},{"path":"https://docs.ropensci.org/coder/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Deterministic Categorization of Items Based on External Code Data","text":"can install released version coder CRAN : development version GitHub :","code":"# install.packages(\"coder\") # install.packages(\"remotes\") remotes::install_github(\"eribul/coder\")"},{"path":"https://docs.ropensci.org/coder/index.html","id":"typical-use-case","dir":"","previous_headings":"","what":"Typical use case","title":"Deterministic Categorization of Items Based on External Code Data","text":"Determining comorbidities clinical trials Discovering adverse events surgery Patient data: initial rationale package classify patient data based medical coding. typical use case consider patients medical/administrative data base, identified patient id possibly associated date interest (date diagnoses/treatment/intervention/hospitalization/rehabilitation). data source example administrative hospital register national quality register. Codify: primary source linked secondary (possibly larger) data base including patients corresponding id:s coded patient data. national patient register medical codes International Classification Diseases (ICD) corresponding dates hospital visits/admission/discharge, medical prescription register codes Anatomic Therapeutic Chemical (ATC) classification system dates medical prescription/dispatch/usage. time window specified relating date primary source (. e. date primary total hip arthroplasty; THA), dates secondary source (.e. date medical prescription). ATC codes associated medical prescriptions one year prior THA, thus identified used measure comorbidity. Another time window 90 days THA, might instead used identify adverse events surgery. Classify: work medical/chemical codes directly might cumbersome, since classifications tend massive therefore hard interpret. thus common use data aggregation proposed classification combined index literature. Charlson Elixhauser comorbidity indices based ICD-codes, RxRisk V classification based ATC-codes. tools appear different code versions (ICD-8, ICD-9, ICD-9-CM, ICD-10, ICD-10-CA, ICD-10-SE, ICD-10-CM et cetera) different codes recognized relevant comorbidities (Charlson index proposed Charlson et al, Deyo et al, Romano et al. Quan et al. et cetera). Using third object (addition primary secondary patient data sets) helps formalize structure use classifications. implemented coder package classcodes objects based regular expressions (often several alternative versions). classcodes objects prepared user, although number default classcodes also included package (table ). Index: Now, instead working tens thousands individual ICD-codes, patient might recognized none familiar comorbidity hypertension, cancer dementia. granularity might fine-grained still, wherefore even simpler index score might searched . scores/indices/weighted sums proposed well exist many versions standard classifications. simple counts, weighted sums, accounts inherited hierarchy (ICD-codes diabetes without complications might recognized patient, although un-complicated version might masked complicated version index). Conditions: complexity might appear codes supposed recognized based certain conditions. Patients THA example might adverse event surgery certain ICD-code recorded main diagnose later hospital visit, although code ignored recorded secondary diagnosis. summarize: coder package takes three objects: (1) data frame/table/tibble id possible dates primary source; (2) coded data secondary source id possibly different dates ; (3) classcodes object, either default one package, specified user. outcome : () codes associated element (1) identified (2), possibly limited relevant time window; (ii) broader categorization relevant codes prescribed (3), ; (iii) summarized index score based relevant categories (3). (-iii) corresponds output functions codify(), classify() index(), chained explicitly codify() %>% classify() %>% index(), implicitly categorize() function.","code":""},{"path":"https://docs.ropensci.org/coder/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Deterministic Categorization of Items Based on External Code Data","text":"Assume patients surgery specified dates: patients (among others) also recorded national patient register date hospital admissions diagnoses codes coded International Classification Diseases (ICD) version 10: Using two data sets, well classification scheme (classcodes object; see ), can easily identify Charlson comorbidities patient: many patients diagnosed malignancy? distribution combined comorbidity index patient? plot chunk unnamed-chunk-5 many versions Charlson comorbidity index, might controlled index argument. might also interested diagnoses 90 days surgery specified argument list codify_argsas passed codify(): Number malignancies period? Distribution index proposed Quan et al 2011 90 day period: plot chunk unnamed-chunk-8","code":"library(coder) ex_people #> # A tibble: 100 × 2 #>    name              surgery    #>    <chr>             <date>     #>  1 Chen, Trevor      2025-04-21 #>  2 Graves, Acineth   2025-01-11 #>  3 Trujillo, Yanelly 2024-12-29 #>  4 Simpson, Kenneth  2025-04-02 #>  5 Chin, Nelson      2025-03-16 #>  6 Le, Christina     2024-10-18 #>  7 Kang, Xuan        2025-01-20 #>  8 Shuemaker, Lauren 2024-10-19 #>  9 Boucher, Teresa   2025-03-27 #> 10 Le, Soraiya       2025-03-01 #> # ℹ 90 more rows ex_icd10 #> # A tibble: 2,376 × 4 #>    name                 admission  icd10 hdia  #>    <chr>                <date>     <chr> <lgl> #>  1 Tran, Kenneth        2024-11-02 S134A FALSE #>  2 Tran, Kenneth        2025-04-18 W3319 FALSE #>  3 Tran, Kenneth        2025-03-28 Y0262 TRUE  #>  4 Tran, Kenneth        2025-02-18 X0488 FALSE #>  5 Sommerville, Dominic 2025-04-09 V8104 FALSE #>  6 Sommerville, Dominic 2024-11-18 B853  FALSE #>  7 Sommerville, Dominic 2025-04-04 Q174  FALSE #>  8 Sommerville, Dominic 2024-11-23 A227  FALSE #>  9 Sommerville, Dominic 2025-03-30 H702  FALSE #> 10 Sommerville, Dominic 2024-07-22 X6051 TRUE  #> # ℹ 2,366 more rows ch <-    categorize(     ex_people,                  # patients of interest      codedata = ex_icd10,        # Medical codes from national patient register     cc = \"charlson\",            # Calculate Charlson comorbidity     id = \"name\", code = \"icd10\" # Specify column names   ) #> Classification based on: icd10  ch #> # A tibble: 100 × 25 #>    name            surgery    myocardial.infarction congestive.heart.fai…¹ peripheral.vascular.…² cerebrovascular.dise…³ dementia #>    <chr>           <date>     <lgl>                 <lgl>                  <lgl>                  <lgl>                  <lgl>    #>  1 Chen, Trevor    2025-04-21 FALSE                 FALSE                  FALSE                  FALSE                  FALSE    #>  2 Graves, Acineth 2025-01-11 FALSE                 FALSE                  FALSE                  FALSE                  FALSE    #>  3 Trujillo, Yane… 2024-12-29 FALSE                 FALSE                  FALSE                  FALSE                  FALSE    #>  4 Simpson, Kenne… 2025-04-02 FALSE                 FALSE                  FALSE                  FALSE                  FALSE    #>  5 Chin, Nelson    2025-03-16 FALSE                 FALSE                  FALSE                  FALSE                  FALSE    #>  6 Le, Christina   2024-10-18 FALSE                 FALSE                  FALSE                  FALSE                  FALSE    #>  7 Kang, Xuan      2025-01-20 FALSE                 FALSE                  FALSE                  FALSE                  FALSE    #>  8 Shuemaker, Lau… 2024-10-19 FALSE                 FALSE                  FALSE                  FALSE                  FALSE    #>  9 Boucher, Teresa 2025-03-27 FALSE                 FALSE                  TRUE                   FALSE                  FALSE    #> 10 Le, Soraiya     2025-03-01 FALSE                 FALSE                  FALSE                  FALSE                  FALSE    #> # ℹ 90 more rows #> # ℹ abbreviated names: ¹​congestive.heart.failure, ²​peripheral.vascular.disease, ³​cerebrovascular.disease #> # ℹ 18 more variables: chronic.pulmonary.disease <lgl>, rheumatic.disease <lgl>, peptic.ulcer.disease <lgl>, #> #   mild.liver.disease <lgl>, diabetes.without.complication <lgl>, hemiplegia.or.paraplegia <lgl>, renal.disease <lgl>, #> #   diabetes.complication <lgl>, malignancy <lgl>, moderate.or.severe.liver.disease <lgl>, metastatic.solid.tumor <lgl>, #> #   AIDS.HIV <lgl>, charlson <dbl>, deyo_ramano <dbl>, dhoore <dbl>, ghali <dbl>, quan_original <dbl>, quan_updated <dbl> sum(ch$malignancy) #> [1] 5 barplot(table(ch$charlson)) ch <-    categorize(     ex_people, codedata = ex_icd10, cc = \"charlson\", id = \"name\", code = \"icd10\",          # Additional arguments     index       = c(\"quan_original\", \"quan_updated\"), # Indices     codify_args = list(       date      = \"surgery\",   # Name of column with index dates       code_date = \"admission\", # Name of column with code dates       days      = c(-90, -1)   # Time window     )   ) #> Classification based on: icd10 sum(ch$malignancy, na.rm = TRUE) #> [1] 3 barplot(table(ch$quan_updated))"},{"path":"https://docs.ropensci.org/coder/index.html","id":"classification-schemes","dir":"","previous_headings":"","what":"Classification schemes","title":"Deterministic Categorization of Items Based on External Code Data","text":"Classification schemes (classcodes objects, see vignette(\"classcodes\")) based regular expressions computational speed (see vignette(\"Interpret_regular_expressions\")), content can summarized visualized clarity. Arbitrary classcodes objects can also specified user. package includes default classcodes medical patient data based international classification diseases version 8, 9 10 (ICD-8/9/10), well Anatomical Therapeutic Chemical Classification System (ATC) medical prescription data. Default classcades listed table. classification (classcodes column) can based several code systems (regex column) several alternative weighted indices (indices column). might combined freely.","code":"coder::all_classcodes() #> # A tibble: 7 × 3 #>   classcodes    regex                                                                                         indices             #>   <chr>         <chr>                                                                                         <chr>               #> 1 charlson      icd10, icd9cm_deyo, icd9cm_enhanced, icd10_rcs, icd10_swe, icd8_brusselaers, icd9_brusselaers \"charlson, deyo_ra… #> 2 cps           icd10                                                                                         \"only_ordinary\"     #> 3 elixhauser    icd10, icd10_short, icd9cm, icd9cm_ahrqweb, icd9cm_enhanced                                   \"sum_all, sum_all_… #> 4 hip_ae        icd10, kva, icd10_fracture                                                                    \"\"                  #> 5 hip_ae_hailer icd10, kva                                                                                    \"\"                  #> 6 knee_ae       icd10, kva                                                                                    \"\"                  #> 7 rxriskv       atc_pratt, atc_caughey, atc_garland                                                           \"pratt, sum_all\""},{"path":"https://docs.ropensci.org/coder/index.html","id":"relation-to-other-packages","dir":"","previous_headings":"","what":"Relation to other packages","title":"Deterministic Categorization of Items Based on External Code Data","text":"coder uses data.table backend increase computational speed large datasets. R packages narrow focus Charlson Elixhauser co-morbidity based ICD-codes (icd, comorbidity, medicalrisk, comorbidities.icd10, icdcoder). coder package includes similar functionalities wider scope.","code":""},{"path":"https://docs.ropensci.org/coder/index.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of conduct","title":"Deterministic Categorization of Items Based on External Code Data","text":"Please note package released Contributor Code Conduct. contributing project, agree abide terms.","code":""},{"path":"https://docs.ropensci.org/coder/reference/ae.html","id":null,"dir":"Reference","previous_headings":"","what":"Classcodes for adverse events after knee and hip arthroplasty — ae","title":"Classcodes for adverse events after knee and hip arthroplasty — ae","text":"ICD-10 group names prefixed two letters given references. Two groups (DB DM) split two due different conditions.","code":""},{"path":"https://docs.ropensci.org/coder/reference/ae.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Classcodes for adverse events after knee and hip arthroplasty — ae","text":"","code":"knee_ae  hip_ae"},{"path":"https://docs.ropensci.org/coder/reference/ae.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Classcodes for adverse events after knee and hip arthroplasty — ae","text":"Data frame 3 columns: group Different types adverse events (see reference section) icd10 regular expressions identifying ICD-10 codes group icd10_fracture regular expressions fracture patients. Essentially regex additional codes group \"DM1 \" kva regular expressions identifying KVA codes condition special conditions used, see . object class classcodes (inherits tbl_df, tbl, data.frame) 7 rows 5 columns.","code":""},{"path":"https://docs.ropensci.org/coder/reference/ae.html","id":"hip-fractures","dir":"Reference","previous_headings":"","what":"Hip fractures","title":"Classcodes for adverse events after knee and hip arthroplasty — ae","text":"Adverse events (AE) codes hip fractures based codes elective cases additional codes DM 1 (N300, N308, N309 N390).","code":""},{"path":"https://docs.ropensci.org/coder/reference/ae.html","id":"conditions","dir":"Reference","previous_headings":"","what":"Conditions","title":"Classcodes for adverse events after knee and hip arthroplasty — ae","text":"Special conditions apply categories. require non-standard modifications classcodes data prior categorization. hbdia1_hdia TRUE code given type diagnose hospital visit index operation, main diagnose later visits, otherwise FALSE late_hdia TRUE code given main diagnose later visit index operation, otherwise FALSE post_op TRUE code given later visit index operation, otherwise FALSE","code":""},{"path":"https://docs.ropensci.org/coder/reference/ae.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Classcodes for adverse events after knee and hip arthroplasty — ae","text":"Magneli M, Unbeck M, Rogmark C, Rolfson O, Hommel , Samuelsson B, et al. Validation adverse events hip arthroplasty: Swedish multi-centre cohort study. BMJ Open. 2019 Mar 7;9(3):e023773.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/coder/reference/all_classcodes.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary data for all default classcodes object in the package — all_classcodes","title":"Summary data for all default classcodes object in the package — all_classcodes","text":"Tabulate object names list related versions implemented regular expressions index weights.","code":""},{"path":"https://docs.ropensci.org/coder/reference/all_classcodes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary data for all default classcodes object in the package — all_classcodes","text":"","code":"all_classcodes()"},{"path":"https://docs.ropensci.org/coder/reference/all_classcodes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summary data for all default classcodes object in the package — all_classcodes","text":"tibble::tibble columns describing default classcodes objects package.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/coder/reference/all_classcodes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summary data for all default classcodes object in the package — all_classcodes","text":"","code":"all_classcodes() #> # A tibble: 7 × 3 #>   classcodes    regex                                                    indices #>   <chr>         <chr>                                                    <chr>   #> 1 charlson      icd10, icd9cm_deyo, icd9cm_enhanced, icd10_rcs, icd10_s… \"charl… #> 2 cps           icd10                                                    \"only_… #> 3 elixhauser    icd10, icd10_short, icd9cm, icd9cm_ahrqweb, icd9cm_enha… \"sum_a… #> 4 hip_ae        icd10, kva, icd10_fracture                               \"\"      #> 5 hip_ae_hailer icd10, kva                                               \"\"      #> 6 knee_ae       icd10, kva                                               \"\"      #> 7 rxriskv       atc_pratt, atc_caughey, atc_garland                      \"pratt…"},{"path":"https://docs.ropensci.org/coder/reference/as.data.frame.classified.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert output from classify() to matrix/data.frame/data.table — as.data.frame.classified","title":"Convert output from classify() to matrix/data.frame/data.table — as.data.frame.classified","text":"Convert output classify() matrix/data.frame/data.table","code":""},{"path":"https://docs.ropensci.org/coder/reference/as.data.frame.classified.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert output from classify() to matrix/data.frame/data.table — as.data.frame.classified","text":"","code":"# S3 method for class 'classified' as.data.frame(x, ...)  # S3 method for class 'classified' as.data.table(x, ...)  # S3 method for class 'classified' as.matrix(x, ...)"},{"path":"https://docs.ropensci.org/coder/reference/as.data.frame.classified.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert output from classify() to matrix/data.frame/data.table — as.data.frame.classified","text":"x output classify() ... ignored","code":""},{"path":"https://docs.ropensci.org/coder/reference/as.data.frame.classified.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert output from classify() to matrix/data.frame/data.table — as.data.frame.classified","text":"data frame/data table : first column named \"id\" column specified input classify() data row.names(x) columns classified row names simply input matrix without additional attributes","code":""},{"path":[]},{"path":"https://docs.ropensci.org/coder/reference/as.data.frame.classified.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert output from classify() to matrix/data.frame/data.table — as.data.frame.classified","text":"","code":"x <- classify(c(\"C80\", \"I20\", \"unvalid_code\"), \"elixhauser\") #> Classification based on: icd10  as.matrix(x)[, 1:3] #>              congestive heart failure cardiac arrhythmias valvular disease #> C80                             FALSE               FALSE            FALSE #> I20                             FALSE               FALSE            FALSE #> unvalid_code                    FALSE               FALSE            FALSE as.data.frame(x)[, 1:3] #>             id congestive heart failure cardiac arrhythmias #> 1          C80                    FALSE               FALSE #> 2          I20                    FALSE               FALSE #> 3 unvalid_code                    FALSE               FALSE data.table::as.data.table(x)[, 1:3] #>              id congestive heart failure cardiac arrhythmias #>          <char>                   <lgcl>              <lgcl> #> 1:          C80                    FALSE               FALSE #> 2:          I20                    FALSE               FALSE #> 3: unvalid_code                    FALSE               FALSE  # `as_tibble()` works automatically due to internal use of `as.data.frame()`. tibble::as_tibble(x) #> # A tibble: 3 × 31 #>   `congestive heart failure` `cardiac arrhythmias` `valvular disease` #>   <classifd>                 <classifd>            <classifd>         #> 1 FALSE                      FALSE                 FALSE              #> 2 FALSE                      FALSE                 FALSE              #> 3 FALSE                      FALSE                 FALSE              #> # ℹ 28 more variables: `pulmonary circulation disorder` <classifd>, #> #   `peripheral vascular disorder` <classifd>, #> #   `hypertension uncomplicated` <classifd>, #> #   `hypertension complicated` <classifd>, paralysis <classifd>, #> #   `other neurological disorders` <classifd>, #> #   `chronic pulmonary disease` <classifd>, #> #   `diabetes uncomplicated` <classifd>, `diabetes complicated` <classifd>, …"},{"path":"https://docs.ropensci.org/coder/reference/as.keyvalue.classcodes.html","id":null,"dir":"Reference","previous_headings":"","what":"Make keyvalue object from classcodes object — as.keyvalue.classcodes","title":"Make keyvalue object from classcodes object — as.keyvalue.classcodes","text":"S3-method generic decoder::.keyvalue()","code":""},{"path":"https://docs.ropensci.org/coder/reference/as.keyvalue.classcodes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make keyvalue object from classcodes object — as.keyvalue.classcodes","text":"","code":"as.keyvalue.classcodes(x, coding, cc_args = list(), ...)"},{"path":"https://docs.ropensci.org/coder/reference/as.keyvalue.classcodes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make keyvalue object from classcodes object — as.keyvalue.classcodes","text":"x classcodes object coding either vector codes original classification, name (character vector length one) keyvalue object package \"decoder\" (example \"icd10cm\" \"atc\") cc_args List named arguments passed set_classcodes() ... additional arguments passed decoder::.keyvalue()","code":""},{"path":"https://docs.ropensci.org/coder/reference/as.keyvalue.classcodes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make keyvalue object from classcodes object — as.keyvalue.classcodes","text":"Object class keyvalue key subset codes object$keyidentified regular expression x value corresponding x$group. Hence, note original object$value used output.","code":""},{"path":"https://docs.ropensci.org/coder/reference/as.keyvalue.classcodes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make keyvalue object from classcodes object — as.keyvalue.classcodes","text":"","code":"# List all codes with corresponding classes as recognized by the Elixhauser # comorbidity classification according to the Swedish version of the # international classification of diseases version 10 (ICD-10-SE) head(decoder::as.keyvalue(elixhauser, \"icd10se\")) #> Error in as.keyvalue.data.frame(elixhauser, \"icd10se\"): A keyvalue object must have exactly two columns: 'key' and 'value'!  # Similar but with the American ICD-10-CM instead # Note that the `value` column is similar as above # (with names from `x$group`) and not # from `object$value` head(decoder::as.keyvalue(elixhauser, \"icd10cm\")) #> Error in as.keyvalue.data.frame(elixhauser, \"icd10cm\"): A keyvalue object must have exactly two columns: 'key' and 'value'!  # Codes identified by regular expressions based on ICD-9-CM and found in # the Swedish version of ICD-9 used within the national cancer register # (thus, a subset of the whole classification). head(   decoder::as.keyvalue(     elixhauser, \"icd9\",     cc_args = list(regex = \"icd9cm\")   ) ) #> Error in as.keyvalue.data.frame(elixhauser, \"icd9\", cc_args = list(regex = \"icd9cm\")): A keyvalue object must have exactly two columns: 'key' and 'value'!"},{"path":"https://docs.ropensci.org/coder/reference/categorize.html","id":null,"dir":"Reference","previous_headings":"","what":"Categorize cases based on external data and classification scheme — categorize","title":"Categorize cases based on external data and classification scheme — categorize","text":"main function package, relies triad objects: (1) data unit id:s possible dates interest; (2) codedata corresponding units optional dates interest ; (3) classification scheme (classcodes object; cc) regular expressions identify categorize relevant codes. function combines three underlying steps performed codify(), classify() index(). Relevant arguments passed functions codify_args cc_args.","code":""},{"path":"https://docs.ropensci.org/coder/reference/categorize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Categorize cases based on external data and classification scheme — categorize","text":"","code":"categorize(x, ...)  # S3 method for class 'data.frame' categorize(x, ...)  # S3 method for class 'tbl_df' categorize(x, ...)  # S3 method for class 'data.table' categorize(x, ..., codedata, id, code, codify_args = list())  # S3 method for class 'codified' categorize(   x,   ...,   cc,   index = NULL,   cc_args = list(),   check.names = TRUE,   .data_cols = NULL )"},{"path":"https://docs.ropensci.org/coder/reference/categorize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Categorize cases based on external data and classification scheme — categorize","text":"x data set mandatory character id column (identified argument id = \"<col_name>\"), optional Date  interest (identified argument date = \"<col_name>\"). Alternatively, output codify() ... arguments passed methods codedata external code data mandatory character id column (identified id = \"<col_name>\"), code column (identified argument code = \"<col_name>\") optional Date column (identified codify_args = list(code_date = \"<col_name>\")). id name unique character id column found xand codedata. (must unique). code name code column codedata. codify_args Lists named arguments passed codify() cc classcodes object (name default object all_classcodes()). index Argument passed index(). character vector names columns index weights corresponding classcodes object (supplied ccargument). See attr(cc, \"indices\") available options. Set FALSE index calculated. NULL, default, available indices (attr(cc, \"indices\")) provided. cc_args List named arguments passed set_classcodes() check.names Column names based cc$group, might include spaces. names changed syntactically correct names check.names = TRUE. Syntactically invalid, grammatically correct names might preferred presentation data achieved check.names = FALSE. Alternatively, categorize called repeatedly, longer informative names might created cc_args = list(tech_names = TRUE). .data_cols used internally","code":""},{"path":"https://docs.ropensci.org/coder/reference/categorize.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Categorize cases based on external data and classification scheme — categorize","text":"Object class x additional logical columns indicating membership groups identified classcodes object (cc argument). Numeric indices also included requested index argument.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/coder/reference/categorize.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Categorize cases based on external data and classification scheme — categorize","text":"","code":"# For this example, 1 core would suffice: old_threads <- data.table::getDTthreads() data.table::setDTthreads(1)  # For some patient data (ex_people) and related hospital visit code data # with ICD 10-codes (ex_icd10), add the Elixhauser comorbidity # conditions based on all registered ICD10-codes categorize(    x            = ex_people,    codedata     = ex_icd10,    cc           = \"elixhauser\",    id           = \"name\",    code         = \"icd10\" ) #> Classification based on: icd10 #> # A tibble: 100 × 40 #>    name   surgery    congestive.heart.fai…¹ cardiac.arrhythmias valvular.disease #>    <chr>  <date>     <lgl>                  <lgl>               <lgl>            #>  1 Chen,… 2025-04-21 FALSE                  FALSE               FALSE            #>  2 Grave… 2025-01-11 FALSE                  FALSE               FALSE            #>  3 Truji… 2024-12-29 FALSE                  FALSE               FALSE            #>  4 Simps… 2025-04-02 FALSE                  FALSE               FALSE            #>  5 Chin,… 2025-03-16 FALSE                  FALSE               FALSE            #>  6 Le, C… 2024-10-18 FALSE                  FALSE               FALSE            #>  7 Kang,… 2025-01-20 FALSE                  FALSE               FALSE            #>  8 Shuem… 2024-10-19 FALSE                  FALSE               FALSE            #>  9 Bouch… 2025-03-27 FALSE                  FALSE               FALSE            #> 10 Le, S… 2025-03-01 FALSE                  FALSE               FALSE            #> # ℹ 90 more rows #> # ℹ abbreviated name: ¹​congestive.heart.failure #> # ℹ 35 more variables: pulmonary.circulation.disorder <lgl>, #> #   peripheral.vascular.disorder <lgl>, hypertension.uncomplicated <lgl>, #> #   hypertension.complicated <lgl>, paralysis <lgl>, #> #   other.neurological.disorders <lgl>, chronic.pulmonary.disease <lgl>, #> #   diabetes.uncomplicated <lgl>, diabetes.complicated <lgl>, …   # Add Charlson categories and two versions of a calculated index # (\"quan_original\" and \"quan_updated\"). categorize(    x            = ex_people,    codedata     = ex_icd10,    cc           = \"charlson\",    id           = \"name\",    code         = \"icd10\",    index        = c(\"quan_original\", \"quan_updated\") ) #> Classification based on: icd10 #> # A tibble: 100 × 21 #>    name              surgery    myocardial.infarction congestive.heart.failure #>    <chr>             <date>     <lgl>                 <lgl>                    #>  1 Chen, Trevor      2025-04-21 FALSE                 FALSE                    #>  2 Graves, Acineth   2025-01-11 FALSE                 FALSE                    #>  3 Trujillo, Yanelly 2024-12-29 FALSE                 FALSE                    #>  4 Simpson, Kenneth  2025-04-02 FALSE                 FALSE                    #>  5 Chin, Nelson      2025-03-16 FALSE                 FALSE                    #>  6 Le, Christina     2024-10-18 FALSE                 FALSE                    #>  7 Kang, Xuan        2025-01-20 FALSE                 FALSE                    #>  8 Shuemaker, Lauren 2024-10-19 FALSE                 FALSE                    #>  9 Boucher, Teresa   2025-03-27 FALSE                 FALSE                    #> 10 Le, Soraiya       2025-03-01 FALSE                 FALSE                    #> # ℹ 90 more rows #> # ℹ 17 more variables: peripheral.vascular.disease <lgl>, #> #   cerebrovascular.disease <lgl>, dementia <lgl>, #> #   chronic.pulmonary.disease <lgl>, rheumatic.disease <lgl>, #> #   peptic.ulcer.disease <lgl>, mild.liver.disease <lgl>, #> #   diabetes.without.complication <lgl>, hemiplegia.or.paraplegia <lgl>, #> #   renal.disease <lgl>, diabetes.complication <lgl>, malignancy <lgl>, …   # Only include recent hospital visits within 30 days before surgery, categorize(    x            = ex_people,    codedata     = ex_icd10,    cc           = \"charlson\",    id           = \"name\",    code         = \"icd10\",    index        = c(\"quan_original\", \"quan_updated\"),    codify_args  = list(       date      = \"surgery\",       days      = c(-30, -1),       code_date = \"admission\"    ) ) #> Classification based on: icd10 #> # A tibble: 100 × 21 #>    name              surgery    myocardial.infarction congestive.heart.failure #>    <chr>             <date>     <lgl>                 <lgl>                    #>  1 Chen, Trevor      2025-04-21 FALSE                 FALSE                    #>  2 Graves, Acineth   2025-01-11 NA                    NA                       #>  3 Trujillo, Yanelly 2024-12-29 NA                    NA                       #>  4 Simpson, Kenneth  2025-04-02 FALSE                 FALSE                    #>  5 Chin, Nelson      2025-03-16 FALSE                 FALSE                    #>  6 Le, Christina     2024-10-18 FALSE                 FALSE                    #>  7 Kang, Xuan        2025-01-20 FALSE                 FALSE                    #>  8 Shuemaker, Lauren 2024-10-19 FALSE                 FALSE                    #>  9 Boucher, Teresa   2025-03-27 NA                    NA                       #> 10 Le, Soraiya       2025-03-01 FALSE                 FALSE                    #> # ℹ 90 more rows #> # ℹ 17 more variables: peripheral.vascular.disease <lgl>, #> #   cerebrovascular.disease <lgl>, dementia <lgl>, #> #   chronic.pulmonary.disease <lgl>, rheumatic.disease <lgl>, #> #   peptic.ulcer.disease <lgl>, mild.liver.disease <lgl>, #> #   diabetes.without.complication <lgl>, hemiplegia.or.paraplegia <lgl>, #> #   renal.disease <lgl>, diabetes.complication <lgl>, malignancy <lgl>, …    # Multiple versions -------------------------------------------------------  # We can compare categorization by according to Quan et al. (2005); \"icd10\", # and Armitage et al. (2010); \"icd10_rcs\" (see `?charlson`) # Note the use of `tech_names = TRUE` to distinguish the column names from the # two versions.  # We first specify some common settings ... ind <- c(\"quan_original\", \"quan_updated\") cd  <- list(date = \"surgery\", days = c(-30, -1), code_date = \"admission\")  # ... we then categorize once with \"icd10\" as the default regular expression ... categorize(    x            = ex_people,    codedata     = ex_icd10,    cc           = \"charlson\",    id           = \"name\",    code         = \"icd10\",    index        = ind,    codify_args  = cd,    cc_args      = list(tech_names = TRUE) ) %>%  # .. and once more with `regex = \"icd10_rcs\"` categorize(    codedata     = ex_icd10,    cc           = \"charlson\",    id           = \"name\",    code         = \"icd10\",    index        = ind,    codify_args  = cd,    cc_args      = list(regex = \"icd10_rcs\", tech_names = TRUE) ) #> Classification based on: icd10 #> # A tibble: 100 × 37 #>    name              surgery    charlson_icd10_myocardi…¹ charlson_icd10_conge…² #>    <chr>             <date>     <lgl>                     <lgl>                  #>  1 Chen, Trevor      2025-04-21 FALSE                     FALSE                  #>  2 Graves, Acineth   2025-01-11 NA                        NA                     #>  3 Trujillo, Yanelly 2024-12-29 NA                        NA                     #>  4 Simpson, Kenneth  2025-04-02 FALSE                     FALSE                  #>  5 Chin, Nelson      2025-03-16 FALSE                     FALSE                  #>  6 Le, Christina     2024-10-18 FALSE                     FALSE                  #>  7 Kang, Xuan        2025-01-20 FALSE                     FALSE                  #>  8 Shuemaker, Lauren 2024-10-19 FALSE                     FALSE                  #>  9 Boucher, Teresa   2025-03-27 NA                        NA                     #> 10 Le, Soraiya       2025-03-01 FALSE                     FALSE                  #> # ℹ 90 more rows #> # ℹ abbreviated names: ¹​charlson_icd10_myocardial_infarction, #> #   ²​charlson_icd10_congestive_heart_failure #> # ℹ 33 more variables: charlson_icd10_peripheral_vascular_disease <lgl>, #> #   charlson_icd10_cerebrovascular_disease <lgl>, #> #   charlson_icd10_dementia <lgl>, #> #   charlson_icd10_chronic_pulmonary_disease <lgl>, …    # column names ------------------------------------------------------------  # Default column names are based on row names from corresponding classcodes # object but are modified to be syntactically correct. default <-    categorize(ex_people, codedata = ex_icd10, cc = \"elixhauser\",               id = \"name\", code = \"icd10\") #> Classification based on: icd10  # Set `check.names = FALSE` to retain original names: original <-   categorize(     ex_people, codedata = ex_icd10, cc = \"elixhauser\",     id = \"name\", code = \"icd10\",     check.names = FALSE    ) #> Classification based on: icd10  # Or use `tech_names = TRUE` for informative but long names (use case above) tech <-   categorize(ex_people, codedata = ex_icd10, cc = \"elixhauser\",     id = \"name\", code = \"icd10\",     cc_args = list(tech_names = TRUE)   ) #> Classification based on: icd10  # Compare tibble::tibble(names(default), names(original), names(tech)) #> # A tibble: 40 × 3 #>    `names(default)`               `names(original)`              `names(tech)`   #>    <chr>                          <chr>                          <chr>           #>  1 name                           name                           name            #>  2 surgery                        surgery                        surgery         #>  3 congestive.heart.failure       congestive heart failure       elixhauser_icd… #>  4 cardiac.arrhythmias            cardiac arrhythmias            elixhauser_icd… #>  5 valvular.disease               valvular disease               elixhauser_icd… #>  6 pulmonary.circulation.disorder pulmonary circulation disorder elixhauser_icd… #>  7 peripheral.vascular.disorder   peripheral vascular disorder   elixhauser_icd… #>  8 hypertension.uncomplicated     hypertension uncomplicated     elixhauser_icd… #>  9 hypertension.complicated       hypertension complicated       elixhauser_icd… #> 10 paralysis                      paralysis                      elixhauser_icd… #> # ℹ 30 more rows  # Go back to original number of threads data.table::setDTthreads(old_threads)"},{"path":"https://docs.ropensci.org/coder/reference/charlson.html","id":null,"dir":"Reference","previous_headings":"","what":"Classcodes for Charlson comorbidity based on ICD-codes — charlson","title":"Classcodes for Charlson comorbidity based on ICD-codes — charlson","text":"Classcodes Charlson comorbidity based ICD-codes","code":""},{"path":"https://docs.ropensci.org/coder/reference/charlson.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Classcodes for Charlson comorbidity based on ICD-codes — charlson","text":"","code":"charlson"},{"path":"https://docs.ropensci.org/coder/reference/charlson.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Classcodes for Charlson comorbidity based on ICD-codes — charlson","text":"data frame 17 rows 8 variables: group: comorbidity groups description: Verbal description codes described Deyo et al. (1992). icd10: regular expressions identifying ICD-10 codes group decoded Quan et al. 2005. Note classification originally used weights! simply use classification table weights quan_original quan_updated might therefore lead different results originally intended index. icd9cm_deyo:Codes table 1 column \"Deyo's ICD-9-CM\" Quan et al. (2005). Procedure code 38.48 peripheral vascular disease ignored. icd9cm_enhanced: Codes table 1 column \"Enhanced ICD-9-CM\" Quan et al. (2005). icd10_rcs: Codification Armitage (2010). Note Peptic ulcer disease included. liver diseases (including mild) included \"moderate severe liver disease\". diabetes included \"diabetes complication\" icd10_swe: Swedish version using ICD-10 Ludvigsson et al. (2021). Note chronic pulmonary disease combined (separated chronic article). Note mild kidney disease combined R18should also count moderate severe kidney disease (implemented must handled manually). icd8_brusselaers: Back translated version ICD-10 ICD-8 Brusselaers et al. (2017). \"Moderate severe liver disease\" contains liver disease \"diabetes complication\" contains diabetes. icd9_brusselaers: Back translated version ICD-10 ICD-9 Brusselaers et al. (2017). \"Moderate severe liver disease\" contains liver disease \"diabetes complication\" contains diabetes. charlson: original weights suggested Charlson et al. (1987)* deyo_ramano: weights suggested Deyo Romano* dhoore: weights suggested D'Hoore* ghali: weights suggested Ghali* quan_original: weights suggested Quan (2005) quan_updated: weights suggested Quan (2011) Weights decoded Yurkovich et al. (2015).","code":""},{"path":"https://docs.ropensci.org/coder/reference/charlson.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Classcodes for Charlson comorbidity based on ICD-codes — charlson","text":"Armitage, J. N., & van der Meulen, J. H. (2010). Identifying co-morbidity surgical patients using administrative data Royal College Surgeons Charlson Score. British Journal Surgery, 97(5), 772–781. Brusselaers N, Lagergren J. (2017) Charlson Comorbidity Index Registry-based Research. Methods Inf Med 2017;56:401–6. Deyo, R. ., Cherkin, D. C., & Ciol, M. . (1992). Adapting clinical comorbidity index use ICD-9-CM administrative databases. Journal Clinical Epidemiology, 45(6), 613–619. Ludvigsson, J. F., Appelros, P., Askling, J., Byberg, L., Carrero, J.-J., Ekström, . M., Ekström, M., Smedby, K. E., Hagström, H., James, S., Järvholm, B., Michaelsson, K., Pedersen, N. L., Sundelin, H., Sundquist, K., Sundström, J. Adaptation Charlson Comorbidity Index Register-Based Research Sweden. CLEP 2021, 13, 21–41. https://doi.org/10.2147/CLEP.S282475. Quan Hude et al. (2005). Coding algorithms defining comorbidities ICD-9-CM ICD-10 administrative data. Medical care, 1130-1139. Yurkovich, M., Avina-Zubieta, J. ., Thomas, J., Gorenchtein, M., & Lacaille, D. (2015). systematic review identifies valid comorbidity indices derived administrative health data. Journal clinical epidemiology, 68(1), 3-14.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/coder/reference/classcodes.html","id":null,"dir":"Reference","previous_headings":"","what":"Classcodes methods — classcodes","title":"Classcodes methods — classcodes","text":"classcodes classification schemes based regular expression stored data frames. essential package constitute third part triad case data, code data classification scheme.","code":""},{"path":"https://docs.ropensci.org/coder/reference/classcodes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Classcodes methods — classcodes","text":"","code":"as.classcodes(x, ...)  # S3 method for class 'classcodes' as.classcodes(   x,   ...,   regex = attr(x, \"regexpr\"),   indices = attr(x, \"indices\"),   hierarchy = attr(x, \"hierarchy\") )  # S3 method for class 'data.frame' as.classcodes(   x,   ...,   regex = NULL,   indices = NULL,   hierarchy = attr(x, \"hierarchy\"),   .name = NULL )  is.classcodes(x)"},{"path":"https://docs.ropensci.org/coder/reference/classcodes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Classcodes methods — classcodes","text":"x data frame columns described details section. Alternatively classcodes object modified. ... arguments passed methods#' regex, indices character vector names columns x containing regular expressions/indices. hierarchy named list pairwise group names appear superior subordinate indices. used indexing subordinate class redundant (see details section elixhauser example). .name used internally name dispatch","code":""},{"path":"https://docs.ropensci.org/coder/reference/classcodes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Classcodes methods — classcodes","text":"Object class classcodes (inheriting data frame) additional attributes: code: coding used (example \"icd10\", \"ATC\"). NULL unknown/arbitrary coding. regexprs: name columns regular expressions (specified regexargument) indices: name columns (optional) index weights (specified indicesargument) hierarchy: list specified hierarchy argument. name: name specified .name argument.","code":""},{"path":"https://docs.ropensci.org/coder/reference/classcodes.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Classcodes methods — classcodes","text":"classcodes object data frame mandatory columns: group: unique non missing class names least one column regular expressions (regex without Perl-like versions) defining class membership. columns can arbitrary names (specified regex argument). Occurrences non unique regular expressions lead class multiple names. accepted raise warning. Classes disjunct. object can additional optional columns: description: description category condition: class might conditions additional expressed regular expressions. , specified quoted expressions can evaluated within data frame used classify() weights class used index(). one arbitrary names (specified indicesargument).","code":""},{"path":[]},{"path":"https://docs.ropensci.org/coder/reference/classcodes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Classcodes methods — classcodes","text":"","code":"# The Elixhauser comorbidity classification is already a classcodes object is.classcodes(coder::elixhauser) #> [1] TRUE  # Strip its class attributes to use in examples df <- as.data.frame(coder::elixhauser)  # Specify which columns store regular expressions and indices # (assume no hierarchy) elix <-   as.classcodes(     df,     regex     = c(\"icd10\", \"icd10_short\", \"icd9cm\", \"icd9cm_ahrqweb\", \"icd9cm_enhanced\"),     indices   = c(\"sum_all\", \"sum_all_ahrq\", \"walraven\",                 \"sid29\", \"sid30\", \"ahrq_mort\", \"ahrq_readm\"),     hierarchy = NULL   ) elix #>  #> Classcodes object #>   #> Regular expressions: #>    icd10, icd10_short, icd9cm, icd9cm_ahrqweb, icd9cm_enhanced  #> Indices: #>    sum_all, sum_all_ahrq, walraven, sid29, sid30, ahrq_mort, ahrq_readm    #>  #> # A tibble: 31 × 13 #>    group         icd10 icd10_short icd9cm icd9cm_ahrqweb icd9cm_enhanced sum_all #>    <chr>         <chr> <chr>       <chr>  <chr>          <chr>             <dbl> #>  1 congestive h… I(09… I(09|1[13]… 39891… 39891|4(0(2[0… 39891|4(0(2[01…       1 #>  2 cardiac arrh… I(44… I(4[457-9]… 42(6(… NA             42(6([079|1[02…       1 #>  3 valvular dis… A520… A52|I(0[5-… 0932|… 0932|39([4-6]… 0932|39[4-7]|4…       1 #>  4 pulmonary ci… I(2(… I2[678]     41(6|… 41(6|79)       41(5[01]|6|7[0…       1 #>  5 peripheral v… I7([… I7[01389]|… 44(0|… 44([0-2]|3[1-… 0930|4(373|4([…       1 #>  6 hypertension… I10   I10         401[1… 401[19]|6420   401                   1 #>  7 hypertension… I1[1… I1[1-35]    40([2… 40(10|[2-5])|… 40[2-5]               1 #>  8 paralysis     G(04… G(04|11|8[… 34(2[… 34[2-4]|438[2… 3(341|4([23]|4…       1 #>  9 other neurol… G(1[… G(1[0-3]|2… 3(3(1… 3(3([0145]|20… 3(3(19|2[01]|3…       1 #> 10 chronic pulm… (I27… I27|(J([46… 49(([… 49|50([0-5]|6… 4(16[89]|90)|5…       1 #> # ℹ 21 more rows #> # ℹ 6 more variables: sum_all_ahrq <dbl>, walraven <dbl>, sid29 <dbl>, #> #   sid30 <dbl>, ahrq_mort <dbl>, ahrq_readm <dbl>  # Specify hierarchy for patients with different types of cancer and diabetes # See `?elixhauser` for details as.classcodes(   elix,   hierarchy = list(     cancer   = c(\"metastatic cancer\", \"solid tumor\"),     diabetes = c(\"diabetes complicated\", \"diabetes uncomplicated\")   ) ) #>  #> Classcodes object #>   #> Regular expressions: #>    icd10, icd10_short, icd9cm, icd9cm_ahrqweb, icd9cm_enhanced  #> Indices: #>    sum_all, sum_all_ahrq, walraven, sid29, sid30, ahrq_mort, ahrq_readm  #> Hierarchy: #>    c(\"metastatic cancer\", \"solid tumor\"), #>    c(\"diabetes complicated\", \"diabetes uncomplicated\")  #>  #> # A tibble: 31 × 13 #>    group         icd10 icd10_short icd9cm icd9cm_ahrqweb icd9cm_enhanced sum_all #>    <chr>         <chr> <chr>       <chr>  <chr>          <chr>             <dbl> #>  1 congestive h… I(09… I(09|1[13]… 39891… 39891|4(0(2[0… 39891|4(0(2[01…       1 #>  2 cardiac arrh… I(44… I(4[457-9]… 42(6(… NA             42(6([079|1[02…       1 #>  3 valvular dis… A520… A52|I(0[5-… 0932|… 0932|39([4-6]… 0932|39[4-7]|4…       1 #>  4 pulmonary ci… I(2(… I2[678]     41(6|… 41(6|79)       41(5[01]|6|7[0…       1 #>  5 peripheral v… I7([… I7[01389]|… 44(0|… 44([0-2]|3[1-… 0930|4(373|4([…       1 #>  6 hypertension… I10   I10         401[1… 401[19]|6420   401                   1 #>  7 hypertension… I1[1… I1[1-35]    40([2… 40(10|[2-5])|… 40[2-5]               1 #>  8 paralysis     G(04… G(04|11|8[… 34(2[… 34[2-4]|438[2… 3(341|4([23]|4…       1 #>  9 other neurol… G(1[… G(1[0-3]|2… 3(3(1… 3(3([0145]|20… 3(3(19|2[01]|3…       1 #> 10 chronic pulm… (I27… I27|(J([46… 49(([… 49|50([0-5]|6… 4(16[89]|90)|5…       1 #> # ℹ 21 more rows #> # ℹ 6 more variables: sum_all_ahrq <dbl>, walraven <dbl>, sid29 <dbl>, #> #   sid30 <dbl>, ahrq_mort <dbl>, ahrq_readm <dbl>  # Several checks are performed to not allow any erroneous classcodes object if (FALSE) { # \\dontrun{   as.classcodes(iris)   as.classcodes(iris, regex = \"Species\") } # }"},{"path":"https://docs.ropensci.org/coder/reference/classify.html","id":null,"dir":"Reference","previous_headings":"","what":"Classify codified data — classify","title":"Classify codified data — classify","text":"second step codify() %>% classify() %>% index(). Hence, function takes codified data set classify case based relevant codes identified classification scheme provided classcodes object.","code":""},{"path":"https://docs.ropensci.org/coder/reference/classify.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Classify codified data — classify","text":"","code":"classify(codified, cc, ..., cc_args = list())  # Default S3 method classify(codified, cc, ..., cc_args = list())  # S3 method for class 'codified' classify(codified, ...)  # S3 method for class 'data.frame' classify(codified, ...)  # S3 method for class 'data.table' classify(codified, cc, ..., id, code, cc_args = list())"},{"path":"https://docs.ropensci.org/coder/reference/classify.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Classify codified data — classify","text":"codified output codify() cc classcodes object (name default object all_classcodes()). ... arguments passed methods cc_args List named arguments passed set_classcodes() code, id name code/id columns (codified).","code":""},{"path":"https://docs.ropensci.org/coder/reference/classify.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Classify codified data — classify","text":"Object class \"classified\". Inheriting Boolean matrix one row element/row codified columns class corresponding class names (according classcodes object). Note, however, print.classified() preview output tibble.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/coder/reference/classify.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Classify codified data — classify","text":"","code":"# classify.default() ------------------------------------------------------  # Classify individual ICD10-codes by Elixhauser classify(c(\"C80\", \"I20\", \"unvalid_code\"), \"elixhauser\") #> Classification based on: icd10 #>  #> The printed data is of class: classified, matrix. #> It has 3 row(s). #> It is here previewed as a tibble #> Use `print(x, n = NULL)` to print as is (or use `n` to specify the number of rows to preview)! #>  #> # A tibble: 3 × 31 #>   `congestive heart failure` `cardiac arrhythmias` `valvular disease` #>   <lgl>                      <lgl>                 <lgl>              #> 1 FALSE                      FALSE                 FALSE              #> 2 FALSE                      FALSE                 FALSE              #> 3 FALSE                      FALSE                 FALSE              #> # ℹ 28 more variables: `pulmonary circulation disorder` <lgl>, #> #   `peripheral vascular disorder` <lgl>, `hypertension uncomplicated` <lgl>, #> #   `hypertension complicated` <lgl>, paralysis <lgl>, #> #   `other neurological disorders` <lgl>, `chronic pulmonary disease` <lgl>, #> #   `diabetes uncomplicated` <lgl>, `diabetes complicated` <lgl>, #> #   hypothyroidism <lgl>, `renal failure` <lgl>, `liver disease` <lgl>, #> #   `peptic ulcer disease` <lgl>, `AIDS/HIV` <lgl>, lymphoma <lgl>, …    # classify.codified() -----------------------------------------------------  # Prepare some codified data with ICD-10 codes during 1 year (365 days) # before surgery x <-   codify(     ex_people,     ex_icd10,     id        = \"name\",     code      = \"icd10\",     date      = \"surgery\",     days      = c(-365, 0),     code_date = \"admission\"   )  # Classify those patients by the Charlson and Elixhasuer comorbidity indices classify(x, \"charlson\")        # classcodes object by name ... #> Warning: 'classify()' does not preserve row order ('categorize()' does!) #> Classification based on: icd10 #>  #> The printed data is of class: classified, matrix. #> It has 100 row(s). #> It is here previewed as a tibble #> Use `print(x, n = NULL)` to print as is (or use `n` to specify the number of rows to preview)! #>  #> # A tibble: 10 × 17 #>    `myocardial infarction` `congestive heart failure` peripheral vascular dise…¹ #>    <lgl>                   <lgl>                      <lgl>                      #>  1 FALSE                   FALSE                      FALSE                      #>  2 FALSE                   FALSE                      FALSE                      #>  3 FALSE                   FALSE                      FALSE                      #>  4 FALSE                   FALSE                      FALSE                      #>  5 FALSE                   FALSE                      FALSE                      #>  6 FALSE                   FALSE                      FALSE                      #>  7 FALSE                   FALSE                      FALSE                      #>  8 FALSE                   FALSE                      FALSE                      #>  9 FALSE                   FALSE                      FALSE                      #> 10 FALSE                   FALSE                      FALSE                      #> # ℹ abbreviated name: ¹​`peripheral vascular disease` #> # ℹ 14 more variables: `cerebrovascular disease` <lgl>, dementia <lgl>, #> #   `chronic pulmonary disease` <lgl>, `rheumatic disease` <lgl>, #> #   `peptic ulcer disease` <lgl>, `mild liver disease` <lgl>, #> #   `diabetes without complication` <lgl>, `hemiplegia or paraplegia` <lgl>, #> #   `renal disease` <lgl>, `diabetes complication` <lgl>, malignancy <lgl>, #> #   `moderate or severe liver disease` <lgl>, `metastatic solid tumor` <lgl>, … classify(x, coder::elixhauser) # ... or by the object itself #> Warning: 'classify()' does not preserve row order ('categorize()' does!) #> Classification based on: icd10 #>  #> The printed data is of class: classified, matrix. #> It has 100 row(s). #> It is here previewed as a tibble #> Use `print(x, n = NULL)` to print as is (or use `n` to specify the number of rows to preview)! #>  #> # A tibble: 10 × 31 #>    `congestive heart failure` `cardiac arrhythmias` `valvular disease` #>    <lgl>                      <lgl>                 <lgl>              #>  1 FALSE                      FALSE                 FALSE              #>  2 FALSE                      FALSE                 FALSE              #>  3 FALSE                      FALSE                 FALSE              #>  4 FALSE                      FALSE                 FALSE              #>  5 FALSE                      FALSE                 FALSE              #>  6 FALSE                      FALSE                 FALSE              #>  7 FALSE                      FALSE                 FALSE              #>  8 FALSE                      FALSE                 FALSE              #>  9 FALSE                      FALSE                 FALSE              #> 10 NA                         NA                    NA                 #> # ℹ 28 more variables: `pulmonary circulation disorder` <lgl>, #> #   `peripheral vascular disorder` <lgl>, `hypertension uncomplicated` <lgl>, #> #   `hypertension complicated` <lgl>, paralysis <lgl>, #> #   `other neurological disorders` <lgl>, `chronic pulmonary disease` <lgl>, #> #   `diabetes uncomplicated` <lgl>, `diabetes complicated` <lgl>, #> #   hypothyroidism <lgl>, `renal failure` <lgl>, `liver disease` <lgl>, #> #   `peptic ulcer disease` <lgl>, `AIDS/HIV` <lgl>, lymphoma <lgl>, …   # -- start/stop -- # Assume that a prefix \"ICD-10 = \" is used for all codes and that some # additional numbers are added to the end x$icd10 <- paste0(\"ICD-10 = \", x$icd10)  # Set start = FALSE to identify codes which are not necessarily found in the # beginning of the string classify(x, \"charlson\", cc_args = list(start = FALSE)) #> Warning: 'classify()' does not preserve row order ('categorize()' does!) #> Classification based on: icd10 #>  #> The printed data is of class: classified, matrix. #> It has 100 row(s). #> It is here previewed as a tibble #> Use `print(x, n = NULL)` to print as is (or use `n` to specify the number of rows to preview)! #>  #> # A tibble: 10 × 17 #>    `myocardial infarction` `congestive heart failure` peripheral vascular dise…¹ #>    <lgl>                   <lgl>                      <lgl>                      #>  1 FALSE                   FALSE                      FALSE                      #>  2 FALSE                   FALSE                      FALSE                      #>  3 FALSE                   FALSE                      FALSE                      #>  4 FALSE                   FALSE                      FALSE                      #>  5 FALSE                   FALSE                      FALSE                      #>  6 FALSE                   FALSE                      FALSE                      #>  7 FALSE                   FALSE                      FALSE                      #>  8 FALSE                   FALSE                      FALSE                      #>  9 FALSE                   FALSE                      FALSE                      #> 10 FALSE                   FALSE                      FALSE                      #> # ℹ abbreviated name: ¹​`peripheral vascular disease` #> # ℹ 14 more variables: `cerebrovascular disease` <lgl>, dementia <lgl>, #> #   `chronic pulmonary disease` <lgl>, `rheumatic disease` <lgl>, #> #   `peptic ulcer disease` <lgl>, `mild liver disease` <lgl>, #> #   `diabetes without complication` <lgl>, `hemiplegia or paraplegia` <lgl>, #> #   `renal disease` <lgl>, `diabetes complication` <lgl>, malignancy <lgl>, #> #   `moderate or severe liver disease` <lgl>, `metastatic solid tumor` <lgl>, …   # -- regex -- # Use a different version of Charlson (as formulated by regular expressions # according to the Royal College of Surgeons (RCS) by passing arguments to # `set_classcodes()` using the `cc_args` argument y <-   classify(     x,     \"charlson\",     cc_args = list(regex = \"icd10_rcs\")   ) #> Warning: 'classify()' does not preserve row order ('categorize()' does!)   # -- tech_names -- # Assume that we want to compare the results using the default ICD-10 # formulations (from Quan et al. 2005) and the RCS version and that the result # should be put into the same data frame. We can use `tech_names = TRUE` # to distinguish variables with otherwise similar names cc <- list(tech_names = TRUE) # Prepare sommon settings compare <-   merge(   classify(x, \"charlson\", cc_args = cc),   classify(x, \"charlson\", cc_args = c(cc, regex = \"icd10_rcs\")) ) #> Warning: 'classify()' does not preserve row order ('categorize()' does!) #> Classification based on: icd10 #> Warning: 'classify()' does not preserve row order ('categorize()' does!) names(compare) # long but informative and distinguishable column names #>  [1] \"name\"                                                #>  [2] \"charlson_icd10_myocardial_infarction\"                #>  [3] \"charlson_icd10_congestive_heart_failure\"             #>  [4] \"charlson_icd10_peripheral_vascular_disease\"          #>  [5] \"charlson_icd10_cerebrovascular_disease\"              #>  [6] \"charlson_icd10_dementia\"                             #>  [7] \"charlson_icd10_chronic_pulmonary_disease\"            #>  [8] \"charlson_icd10_rheumatic_disease\"                    #>  [9] \"charlson_icd10_peptic_ulcer_disease\"                 #> [10] \"charlson_icd10_mild_liver_disease\"                   #> [11] \"charlson_icd10_diabetes_without_complication\"        #> [12] \"charlson_icd10_hemiplegia_or_paraplegia\"             #> [13] \"charlson_icd10_renal_disease\"                        #> [14] \"charlson_icd10_diabetes_complication\"                #> [15] \"charlson_icd10_malignancy\"                           #> [16] \"charlson_icd10_moderate_or_severe_liver_disease\"     #> [17] \"charlson_icd10_metastatic_solid_tumor\"               #> [18] \"charlson_icd10_aids_hiv\"                             #> [19] \"charlson_icd10_rcs_myocardial_infarction\"            #> [20] \"charlson_icd10_rcs_congestive_heart_failure\"         #> [21] \"charlson_icd10_rcs_peripheral_vascular_disease\"      #> [22] \"charlson_icd10_rcs_cerebrovascular_disease\"          #> [23] \"charlson_icd10_rcs_dementia\"                         #> [24] \"charlson_icd10_rcs_chronic_pulmonary_disease\"        #> [25] \"charlson_icd10_rcs_rheumatic_disease\"                #> [26] \"charlson_icd10_rcs_hemiplegia_or_paraplegia\"         #> [27] \"charlson_icd10_rcs_renal_disease\"                    #> [28] \"charlson_icd10_rcs_diabetes_complication\"            #> [29] \"charlson_icd10_rcs_malignancy\"                       #> [30] \"charlson_icd10_rcs_moderate_or_severe_liver_disease\" #> [31] \"charlson_icd10_rcs_metastatic_solid_tumor\"           #> [32] \"charlson_icd10_rcs_aids_hiv\"                            # classify.data.frame() / classify.data.table() ------------------------  # Assume that `x` is a data.frame/data.table without additional attributes # from `codify()` ... xdf <- as.data.frame(x) xdt <- data.table::as.data.table(x)  # ... then the `id` and `code` columns must be specified explicitly classify(xdf, \"charlson\", id = \"name\", code = \"icd10\") #> Warning: 'classify()' does not preserve row order ('categorize()' does!) #> Classification based on: icd10 #>  #> The printed data is of class: classified, matrix. #> It has 100 row(s). #> It is here previewed as a tibble #> Use `print(x, n = NULL)` to print as is (or use `n` to specify the number of rows to preview)! #>  #> # A tibble: 10 × 17 #>    `myocardial infarction` `congestive heart failure` peripheral vascular dise…¹ #>    <lgl>                   <lgl>                      <lgl>                      #>  1 FALSE                   FALSE                      FALSE                      #>  2 FALSE                   FALSE                      FALSE                      #>  3 FALSE                   FALSE                      FALSE                      #>  4 FALSE                   FALSE                      FALSE                      #>  5 FALSE                   FALSE                      FALSE                      #>  6 FALSE                   FALSE                      FALSE                      #>  7 FALSE                   FALSE                      FALSE                      #>  8 FALSE                   FALSE                      FALSE                      #>  9 FALSE                   FALSE                      FALSE                      #> 10 FALSE                   FALSE                      FALSE                      #> # ℹ abbreviated name: ¹​`peripheral vascular disease` #> # ℹ 14 more variables: `cerebrovascular disease` <lgl>, dementia <lgl>, #> #   `chronic pulmonary disease` <lgl>, `rheumatic disease` <lgl>, #> #   `peptic ulcer disease` <lgl>, `mild liver disease` <lgl>, #> #   `diabetes without complication` <lgl>, `hemiplegia or paraplegia` <lgl>, #> #   `renal disease` <lgl>, `diabetes complication` <lgl>, malignancy <lgl>, #> #   `moderate or severe liver disease` <lgl>, `metastatic solid tumor` <lgl>, … classify(xdt, \"charlson\", id = \"name\", code = \"icd10\") #> Warning: 'classify()' does not preserve row order ('categorize()' does!) #> Classification based on: icd10 #>  #> The printed data is of class: classified, matrix. #> It has 100 row(s). #> It is here previewed as a tibble #> Use `print(x, n = NULL)` to print as is (or use `n` to specify the number of rows to preview)! #>  #> # A tibble: 10 × 17 #>    `myocardial infarction` `congestive heart failure` peripheral vascular dise…¹ #>    <lgl>                   <lgl>                      <lgl>                      #>  1 FALSE                   FALSE                      FALSE                      #>  2 FALSE                   FALSE                      FALSE                      #>  3 FALSE                   FALSE                      FALSE                      #>  4 FALSE                   FALSE                      FALSE                      #>  5 FALSE                   FALSE                      FALSE                      #>  6 FALSE                   FALSE                      FALSE                      #>  7 FALSE                   FALSE                      FALSE                      #>  8 FALSE                   FALSE                      FALSE                      #>  9 FALSE                   FALSE                      FALSE                      #> 10 FALSE                   FALSE                      FALSE                      #> # ℹ abbreviated name: ¹​`peripheral vascular disease` #> # ℹ 14 more variables: `cerebrovascular disease` <lgl>, dementia <lgl>, #> #   `chronic pulmonary disease` <lgl>, `rheumatic disease` <lgl>, #> #   `peptic ulcer disease` <lgl>, `mild liver disease` <lgl>, #> #   `diabetes without complication` <lgl>, `hemiplegia or paraplegia` <lgl>, #> #   `renal disease` <lgl>, `diabetes complication` <lgl>, malignancy <lgl>, #> #   `moderate or severe liver disease` <lgl>, `metastatic solid tumor` <lgl>, …"},{"path":"https://docs.ropensci.org/coder/reference/clean_text.html","id":null,"dir":"Reference","previous_headings":"","what":"Make clean text with only lowercase alphanumeric characters and ","title":"Make clean text with only lowercase alphanumeric characters and ","text":"Make clean text lowercase alphanumeric characters \"_\"","code":""},{"path":"https://docs.ropensci.org/coder/reference/clean_text.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make clean text with only lowercase alphanumeric characters and ","text":"","code":"clean_text(x_name, x)"},{"path":"https://docs.ropensci.org/coder/reference/clean_text.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make clean text with only lowercase alphanumeric characters and ","text":"x_name Name object use prefix x character vector","code":""},{"path":"https://docs.ropensci.org/coder/reference/clean_text.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make clean text with only lowercase alphanumeric characters and ","text":"character vector length x","code":""},{"path":"https://docs.ropensci.org/coder/reference/codebook.html","id":null,"dir":"Reference","previous_headings":"","what":"codebook(s) for classcodes object — codebook","title":"codebook(s) for classcodes object — codebook","text":"summary.classcodes() visualize.classcodes() used summarize/visualize classcodes R. codebook, hand, exported summary saved Excel spreadsheet use collaboration non R-users. Several codebooks might combined single Excel document several sheets (one codebook).","code":""},{"path":"https://docs.ropensci.org/coder/reference/codebook.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"codebook(s) for classcodes object — codebook","text":"","code":"codebook(object, coding, ..., file = NULL)  # S3 method for class 'codebook' print(x, ...)  codebooks(..., file = NULL)"},{"path":"https://docs.ropensci.org/coder/reference/codebook.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"codebook(s) for classcodes object — codebook","text":"object classcodes object coding either vector codes original classification, name (character vector length one) keyvalue object package \"decoder\" (example \"icd10cm\" \"atc\") ... Additional arguments function: codebook(): arguments passed summary.classcodes() codebooks(): multiple named outputs codebook() print.codebook(): arguments passed tibble:::print.tbl() file name/path Excel file data export x output codebook()","code":""},{"path":"https://docs.ropensci.org/coder/reference/codebook.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"codebook(s) for classcodes object — codebook","text":"Functions primarily called side effects (exporting data Excel printing screen). addition: codebook()returns list data frames describing relationship groups individual codes codebooks() returns concatenated list output codebook(). one 'README' object kept however renamed . print.codebook()returns x (invisible)","code":""},{"path":[]},{"path":"https://docs.ropensci.org/coder/reference/codebook.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"codebook(s) for classcodes object — codebook","text":"","code":"# codebook() -------------------------------------------------------------- if (FALSE) { # \\dontrun{ # Export codebook (to temporary file) with all codes identified by the # Elixhauser comorbidity classification based on ICD-10-CM codebook(elixhauser, \"icd10cm\", file = tempfile(\"codebook\", fileext = \".xlsx\"))  # All codes from ICD-9-CM Disease part used by Elixhauser enhanced version codebook(elixhauser, \"icd9cmd\",   cc_args = list(regex = \"icd9cm_enhanced\",   file = tempfile(\"codebook\", fileext = \".xlsx\")) )  # The codebook returns a list with three objects. # Access a dictionary table with translates of each code to text: codebook(charlson, \"icd10cm\")$all_codes   # print.codebook() --------------------------------------------------------  # If argument `file` is unspecified, a preview of each sheet of the codebook is # printed to the screen (cb <- codebook(charlson, \"icd10cm\"))  # The preview can be modified by arguments to the print-method print(cb, n = 20)   # codebooks() -------------------------------------------------------------  # Combine codebooks based on different versions of the regular expressions # and export to a single (temporary) Excel file c1 <- codebook(elixhauser, \"icd10cm\") c2 <- codebook(elixhauser, \"icd9cmd\",   cc_args = list(regex = \"icd9cm_enhanced\")   )  codebooks(   elix_icd10 = c1, elix_icd9cm = c2,   file = tempfile(\"codebooks\", fileext = \".xlsx\") ) } # }"},{"path":"https://docs.ropensci.org/coder/reference/coder-package.html","id":null,"dir":"Reference","previous_headings":"","what":"coder: Deterministic Categorization of Items Based on External Code Data — coder-package","title":"coder: Deterministic Categorization of Items Based on External Code Data — coder-package","text":"Fast categorization items based external code data identified regular expressions. typical use case considers patient medically coded data, codes International Classification Diseases ('ICD') Anatomic Therapeutic Chemical ('ATC') classification system. Functions package relies triad objects: (1) case data unit id:s possible dates interest; (2) external code data corresponding units (1) optional dates interest ; (3) classification scheme ('classcodes' object) regular expressions identify categorize relevant codes (2). easy introduce new classification schemes ('classcodes' objects) use default schemes included package. Use cases includes patient categorization based 'comorbidity indices' 'Charlson', 'Elixhauser', 'RxRisk V', 'comorbidity-polypharmacy' score (CPS), well adverse events hip knee replacement surgery.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/coder/reference/coder-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"coder: Deterministic Categorization of Items Based on External Code Data — coder-package","text":"Maintainer: Erik Bulow eriklgb@gmail.com (ORCID) contributors: Emely C Zabore (Emily reviewed package (v. 0.12.1) rOpenSci, see <https://github.com/ropensci/software-review/issues/381>) [reviewer] David Robinson (David reviewed package (v. 0.12.1) rOpenSci, see <https://github.com/ropensci/software-review/issues/381>) [reviewer]","code":""},{"path":"https://docs.ropensci.org/coder/reference/codify.html","id":null,"dir":"Reference","previous_headings":"","what":"Codify case data with external code data (within specified time frames) — codify","title":"Codify case data with external code data (within specified time frames) — codify","text":"first step codify() %>% classify() %>% index(). function combines case data one data set related code data second source, possibly limited codes valid certain time points relative case dates.","code":""},{"path":"https://docs.ropensci.org/coder/reference/codify.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Codify case data with external code data (within specified time frames) — codify","text":"","code":"codify(x, codedata, ..., id, code, date = NULL, code_date = NULL, days = NULL)  # S3 method for class 'data.frame' codify(x, ..., id, date = NULL, days = NULL)  # S3 method for class 'data.table' codify(   x,   codedata,   ...,   id,   code,   date = NULL,   code_date = NULL,   days = NULL,   alnum = FALSE,   .copy = NA )  # S3 method for class 'codified' print(x, ..., n = 10)"},{"path":"https://docs.ropensci.org/coder/reference/codify.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Codify case data with external code data (within specified time frames) — codify","text":"x data set mandatory character id column (identified argument id = \"<col_name>\"), optional Date  interest (identified argument date = \"<col_name>\"). Alternatively, output codify() codedata additional data columns including case id (character), code optional date (Date) code. optional column condition might distinguish codes/dates certain characteristics (see example). ... arguments passed methods id, code, date, code_date column names case id (character x codedata), code (x) optional date (Date x) code_date (Date codedata). days numeric vector length two lower upper bound range relevant days relative date. See \"Relevant period\". alnum codes cleaned non alphanumeric characters? .copy object copied internally data.table::copy()? NA (default) means objects smaller 1 GB copied. size larger, argument must set explicitly. Set TRUE make copies regardless object size. recommended enough RAM available. set FALSE, calculations might carried object changed reference. IMPORTANT! might lead undesired consequences used absolutely necessary! n number rows preview tibble. output technically data.table::data.table, might unusual format look . Use n = NULL print object .","code":""},{"path":"https://docs.ropensci.org/coder/reference/codify.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Codify case data with external code data (within specified time frames) — codify","text":"Object class codified (inheriting data.table::data.table). Essentially x additional columns: code, code_date: left joined codedata NA match within period. in_period: Boolean indicator case least one code within specified period. output one row combination \"id\" x \"code\" codedata. Rows x might repeated accordingly.","code":""},{"path":"https://docs.ropensci.org/coder/reference/codify.html","id":"relevant-period","dir":"Reference","previous_headings":"","what":"Relevant period","title":"Codify case data with external code data (within specified time frames) — codify","text":"examples argument days: c(-365, -1): window one year prior date column x. Useful patient comorbidity. c(1, 30): window 30 days date. Useful adverse events surgical procedure. c(-Inf, Inf): limitation non-missing dates. NULL: time limitation .","code":""},{"path":[]},{"path":"https://docs.ropensci.org/coder/reference/codify.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Codify case data with external code data (within specified time frames) — codify","text":"","code":"# Codify all patients from `ex_people` with their ICD-10 codes from `ex_icd10` x <- codify(ex_people, ex_icd10, id = \"name\", code = \"icd10\") x #>  #> The printed data is of class: codified, data.table, data.frame. #> It has 700 row(s). #> It is here previewed as a tibble #> Use `print(x, n = NULL)` to print as is (or use `n` to specify the number of rows to preview)! #>  #> # A tibble: 10 × 6 #>    name                admission  icd10 hdia  in_period surgery    #>    <chr>               <date>     <chr> <lgl> <lgl>     <date>     #>  1 Archer, Leon Hunter 2025-02-17 B469  FALSE TRUE      2024-12-15 #>  2 Archer, Leon Hunter 2024-06-27 E012  FALSE TRUE      2024-12-15 #>  3 Archer, Leon Hunter 2025-03-06 R900  FALSE TRUE      2024-12-15 #>  4 Archer, Leon Hunter 2024-09-02 V7413 FALSE TRUE      2024-12-15 #>  5 Archer, Leon Hunter 2024-07-19 V8698 FALSE TRUE      2024-12-15 #>  6 Archer, Leon Hunter 2024-08-09 X3403 FALSE TRUE      2024-12-15 #>  7 Archer, Leon Hunter 2024-08-08 X4128 FALSE TRUE      2024-12-15 #>  8 Archer, Leon Hunter 2024-08-25 Z752  FALSE TRUE      2024-12-15 #>  9 Awtrey, Antonio     2025-04-17 N608  FALSE TRUE      2025-04-12 #> 10 Awtrey, Antonio     2025-02-17 W0341 FALSE TRUE      2025-04-12  # Only consider codes if recorded at hospital admissions within one year prior # to surgery codify(   ex_people,   ex_icd10,   id        = \"name\",   code      = \"icd10\",   date      = \"surgery\",   code_date = \"admission\",   days      = c(-365, 0)   # admission during one year before surgery ) #>  #> The printed data is of class: codified, data.table, data.frame. #> It has 378 row(s). #> It is here previewed as a tibble #> Use `print(x, n = NULL)` to print as is (or use `n` to specify the number of rows to preview)! #>  #> # A tibble: 10 × 6 #>    name                surgery    admission  icd10 hdia  in_period #>    <chr>               <date>     <date>     <chr> <lgl> <lgl>     #>  1 Archer, Leon Hunter 2024-12-15 2024-06-27 E012  FALSE TRUE      #>  2 Archer, Leon Hunter 2024-12-15 2024-07-19 V8698 FALSE TRUE      #>  3 Archer, Leon Hunter 2024-12-15 2024-08-08 X4128 FALSE TRUE      #>  4 Archer, Leon Hunter 2024-12-15 2024-08-09 X3403 FALSE TRUE      #>  5 Archer, Leon Hunter 2024-12-15 2024-08-25 Z752  FALSE TRUE      #>  6 Archer, Leon Hunter 2024-12-15 2024-09-02 V7413 FALSE TRUE      #>  7 Awtrey, Antonio     2025-04-12 2024-08-05 X3322 FALSE TRUE      #>  8 Awtrey, Antonio     2025-04-12 2024-10-26 Y1614 FALSE TRUE      #>  9 Awtrey, Antonio     2025-04-12 2024-10-29 X7564 FALSE TRUE      #> 10 Awtrey, Antonio     2025-04-12 2024-12-16 X6542 FALSE TRUE       # Only consider codes if recorded after surgery codify(   ex_people,   ex_icd10,   id        = \"name\",   code      = \"icd10\",   date      = \"surgery\",   code_date = \"admission\",   days      = c(1, Inf)     # admission any time after surgery ) #>  #> The printed data is of class: codified, data.table, data.frame. #> It has 355 row(s). #> It is here previewed as a tibble #> Use `print(x, n = NULL)` to print as is (or use `n` to specify the number of rows to preview)! #>  #> # A tibble: 10 × 6 #>    name                surgery    admission  icd10 hdia  in_period #>    <chr>               <date>     <date>     <chr> <lgl> <lgl>     #>  1 Archer, Leon Hunter 2024-12-15 2025-02-17 B469  FALSE TRUE      #>  2 Archer, Leon Hunter 2024-12-15 2025-03-06 R900  FALSE TRUE      #>  3 Awtrey, Antonio     2025-04-12 2025-04-17 N608  FALSE TRUE      #>  4 Bammesberger, Jozi  2024-10-15 2024-11-18 V4931 FALSE TRUE      #>  5 Bammesberger, Jozi  2024-10-15 2024-12-02 V4960 FALSE TRUE      #>  6 Bammesberger, Jozi  2024-10-15 2025-01-22 X6414 FALSE TRUE      #>  7 Bammesberger, Jozi  2024-10-15 2025-02-10 Y1513 FALSE TRUE      #>  8 Bammesberger, Jozi  2024-10-15 2025-05-01 P293A FALSE TRUE      #>  9 Banks, Silbret      2025-01-08 2025-01-26 D229D FALSE TRUE      #> 10 Banks, Silbret      2025-01-08 2025-02-15 V7452 TRUE  TRUE        # Dirty code data ---------------------------------------------------------  # Assume that codes contain unwanted \"dirty\" characters # Those could for example be a dot used by ICD-10 (i.e. X12.3 instead of X123) dirt <- c(strsplit(c(\"!#%&/()=?`,.-_\"), split = \"\"), recursive = TRUE) rdirt <- function(x) sample(x, nrow(ex_icd10), replace = TRUE) sub <- function(i) substr(ex_icd10$icd10, i, i) ex_icd10$icd10 <-   paste0(     rdirt(dirt), sub(1),     rdirt(dirt), sub(2),     rdirt(dirt), sub(3),     rdirt(dirt), sub(4),     rdirt(dirt), sub(5)   ) head(ex_icd10) #> # A tibble: 6 × 4 #>   name                 admission  icd10      hdia  #>   <chr>                <date>     <chr>      <lgl> #> 1 Tran, Kenneth        2024-11-02 -S_1_3,4.A FALSE #> 2 Tran, Kenneth        2025-04-18 )W/3(3&1)9 FALSE #> 3 Tran, Kenneth        2025-03-28 .Y_0%2?6?2 TRUE  #> 4 Tran, Kenneth        2025-02-18 /X-0/4%8-8 FALSE #> 5 Sommerville, Dominic 2025-04-09 (V!8-1)0?4 FALSE #> 6 Sommerville, Dominic 2024-11-18 &B=8_5%3-  FALSE  # Use `alnum = TRUE` to ignore non alphanumeric characters codify(ex_people, ex_icd10, id = \"name\", code = \"icd10\", alnum = TRUE) #>  #> The printed data is of class: codified, data.table, data.frame. #> It has 700 row(s). #> It is here previewed as a tibble #> Use `print(x, n = NULL)` to print as is (or use `n` to specify the number of rows to preview)! #>  #> # A tibble: 10 × 6 #>    name                admission  icd10 hdia  in_period surgery    #>    <chr>               <date>     <chr> <lgl> <lgl>     <date>     #>  1 Archer, Leon Hunter 2024-08-09 X3403 FALSE TRUE      2024-12-15 #>  2 Archer, Leon Hunter 2024-07-19 V8698 FALSE TRUE      2024-12-15 #>  3 Archer, Leon Hunter 2025-03-06 R900  FALSE TRUE      2024-12-15 #>  4 Archer, Leon Hunter 2024-08-25 Z752  FALSE TRUE      2024-12-15 #>  5 Archer, Leon Hunter 2025-02-17 B469  FALSE TRUE      2024-12-15 #>  6 Archer, Leon Hunter 2024-08-08 X4128 FALSE TRUE      2024-12-15 #>  7 Archer, Leon Hunter 2024-06-27 E012  FALSE TRUE      2024-12-15 #>  8 Archer, Leon Hunter 2024-09-02 V7413 FALSE TRUE      2024-12-15 #>  9 Awtrey, Antonio     2025-04-17 N608  FALSE TRUE      2025-04-12 #> 10 Awtrey, Antonio     2025-02-17 W0341 FALSE TRUE      2025-04-12    # Big data ----------------------------------------------------------------  # If `data` or `codedata` are large compared to available # Random Access Memory (RAM) it might not be possible to make internal copies # of those objects. Setting `.copy = FALSE` might help to overcome such problems  # If no copies are made internally, however, the input objects (if data tables) # would change in the global environment x2 <- data.table::as.data.table(ex_icd10) head(x2) # Look at the \"icd10\" column (with dirty data) #>                    name  admission      icd10   hdia #>                  <char>     <Date>     <char> <lgcl> #> 1:        Tran, Kenneth 2024-11-02 -S_1_3,4.A  FALSE #> 2:        Tran, Kenneth 2025-04-18 )W/3(3&1)9  FALSE #> 3:        Tran, Kenneth 2025-03-28 .Y_0%2?6?2   TRUE #> 4:        Tran, Kenneth 2025-02-18 /X-0/4%8-8  FALSE #> 5: Sommerville, Dominic 2025-04-09 (V!8-1)0?4  FALSE #> 6: Sommerville, Dominic 2024-11-18  &B=8_5%3-  FALSE  # Use `alnum = TRUE` combined with `.copy = FALSE` codify(ex_people, x2, id = \"name\", code = \"icd10\", alnum = TRUE, .copy = FALSE) #>  #> The printed data is of class: codified, data.table, data.frame. #> It has 700 row(s). #> It is here previewed as a tibble #> Use `print(x, n = NULL)` to print as is (or use `n` to specify the number of rows to preview)! #>  #> # A tibble: 10 × 6 #>    name                admission  icd10 hdia  in_period surgery    #>    <chr>               <date>     <chr> <lgl> <lgl>     <date>     #>  1 Archer, Leon Hunter 2025-03-06 R900  FALSE TRUE      2024-12-15 #>  2 Archer, Leon Hunter 2024-08-09 X3403 FALSE TRUE      2024-12-15 #>  3 Archer, Leon Hunter 2024-08-08 X4128 FALSE TRUE      2024-12-15 #>  4 Archer, Leon Hunter 2024-08-25 Z752  FALSE TRUE      2024-12-15 #>  5 Archer, Leon Hunter 2024-06-27 E012  FALSE TRUE      2024-12-15 #>  6 Archer, Leon Hunter 2024-09-02 V7413 FALSE TRUE      2024-12-15 #>  7 Archer, Leon Hunter 2024-07-19 V8698 FALSE TRUE      2024-12-15 #>  8 Archer, Leon Hunter 2025-02-17 B469  FALSE TRUE      2024-12-15 #>  9 Awtrey, Antonio     2024-12-16 X6542 FALSE TRUE      2025-04-12 #> 10 Awtrey, Antonio     2025-03-20 X4078 FALSE TRUE      2025-04-12  # Even though no explicit assignment was specified # (neither for the output of codify(), nor to explicitly alter `x2`, # the `x2` object has changed (look at the \"icd10\" column!): head(x2) #>                    name  admission  icd10   hdia #>                  <char>     <Date> <char> <lgcl> #> 1:        Tran, Kenneth 2024-11-02  S134A  FALSE #> 2:        Tran, Kenneth 2025-04-18  W3319  FALSE #> 3:        Tran, Kenneth 2025-03-28  Y0262   TRUE #> 4:        Tran, Kenneth 2025-02-18  X0488  FALSE #> 5: Sommerville, Dominic 2025-04-09  V8104  FALSE #> 6: Sommerville, Dominic 2024-11-18   B853  FALSE  # Hence, the `.copy` argument should only be used if necessary # and if so, with caution!   # print.codify() ----------------------------------------------------------  x # Preview first 10 rows as a tibble #>  #> The printed data is of class: codified, data.table, data.frame. #> It has 700 row(s). #> It is here previewed as a tibble #> Use `print(x, n = NULL)` to print as is (or use `n` to specify the number of rows to preview)! #>  #> # A tibble: 10 × 6 #>    name                admission  icd10 hdia  in_period surgery    #>    <chr>               <date>     <chr> <lgl> <lgl>     <date>     #>  1 Archer, Leon Hunter 2025-02-17 B469  FALSE TRUE      2024-12-15 #>  2 Archer, Leon Hunter 2024-06-27 E012  FALSE TRUE      2024-12-15 #>  3 Archer, Leon Hunter 2025-03-06 R900  FALSE TRUE      2024-12-15 #>  4 Archer, Leon Hunter 2024-09-02 V7413 FALSE TRUE      2024-12-15 #>  5 Archer, Leon Hunter 2024-07-19 V8698 FALSE TRUE      2024-12-15 #>  6 Archer, Leon Hunter 2024-08-09 X3403 FALSE TRUE      2024-12-15 #>  7 Archer, Leon Hunter 2024-08-08 X4128 FALSE TRUE      2024-12-15 #>  8 Archer, Leon Hunter 2024-08-25 Z752  FALSE TRUE      2024-12-15 #>  9 Awtrey, Antonio     2025-04-17 N608  FALSE TRUE      2025-04-12 #> 10 Awtrey, Antonio     2025-02-17 W0341 FALSE TRUE      2025-04-12 print(x, n = 20) # Preview first 20 rows as a tibble #>  #> The printed data is of class: codified, data.table, data.frame. #> It has 700 row(s). #> It is here previewed as a tibble #> Use `print(x, n = NULL)` to print as is (or use `n` to specify the number of rows to preview)! #>  #> # A tibble: 20 × 6 #>    name                admission  icd10 hdia  in_period surgery    #>    <chr>               <date>     <chr> <lgl> <lgl>     <date>     #>  1 Archer, Leon Hunter 2025-02-17 B469  FALSE TRUE      2024-12-15 #>  2 Archer, Leon Hunter 2024-06-27 E012  FALSE TRUE      2024-12-15 #>  3 Archer, Leon Hunter 2025-03-06 R900  FALSE TRUE      2024-12-15 #>  4 Archer, Leon Hunter 2024-09-02 V7413 FALSE TRUE      2024-12-15 #>  5 Archer, Leon Hunter 2024-07-19 V8698 FALSE TRUE      2024-12-15 #>  6 Archer, Leon Hunter 2024-08-09 X3403 FALSE TRUE      2024-12-15 #>  7 Archer, Leon Hunter 2024-08-08 X4128 FALSE TRUE      2024-12-15 #>  8 Archer, Leon Hunter 2024-08-25 Z752  FALSE TRUE      2024-12-15 #>  9 Awtrey, Antonio     2025-04-17 N608  FALSE TRUE      2025-04-12 #> 10 Awtrey, Antonio     2025-02-17 W0341 FALSE TRUE      2025-04-12 #> 11 Awtrey, Antonio     2024-08-05 X3322 FALSE TRUE      2025-04-12 #> 12 Awtrey, Antonio     2025-03-20 X4078 FALSE TRUE      2025-04-12 #> 13 Awtrey, Antonio     2024-12-16 X6542 FALSE TRUE      2025-04-12 #> 14 Awtrey, Antonio     2024-10-29 X7564 FALSE TRUE      2025-04-12 #> 15 Awtrey, Antonio     2025-02-11 Y0492 FALSE TRUE      2025-04-12 #> 16 Awtrey, Antonio     2024-10-26 Y1614 FALSE TRUE      2025-04-12 #> 17 Bammesberger, Jozi  2025-05-01 P293A FALSE TRUE      2024-10-15 #> 18 Bammesberger, Jozi  2024-06-12 V1051 FALSE TRUE      2024-10-15 #> 19 Bammesberger, Jozi  2024-08-19 V1392 FALSE TRUE      2024-10-15 #> 20 Bammesberger, Jozi  2024-11-18 V4931 FALSE TRUE      2024-10-15 print(x, n = NULL) # Print as data.table (ignoring the 'classified' class) #>  #> The printed data is of class: codified, data.table, data.frame. #> It has 700 row(s). #> It is here previewed as a tibble #> Use `print(x, n = NULL)` to print as is (or use `n` to specify the number of rows to preview)! #>  #> # A tibble: 10 × 6 #>    name                admission  icd10 hdia  in_period surgery    #>    <chr>               <date>     <chr> <lgl> <lgl>     <date>     #>  1 Archer, Leon Hunter 2025-02-17 B469  FALSE TRUE      2024-12-15 #>  2 Archer, Leon Hunter 2024-06-27 E012  FALSE TRUE      2024-12-15 #>  3 Archer, Leon Hunter 2025-03-06 R900  FALSE TRUE      2024-12-15 #>  4 Archer, Leon Hunter 2024-09-02 V7413 FALSE TRUE      2024-12-15 #>  5 Archer, Leon Hunter 2024-07-19 V8698 FALSE TRUE      2024-12-15 #>  6 Archer, Leon Hunter 2024-08-09 X3403 FALSE TRUE      2024-12-15 #>  7 Archer, Leon Hunter 2024-08-08 X4128 FALSE TRUE      2024-12-15 #>  8 Archer, Leon Hunter 2024-08-25 Z752  FALSE TRUE      2024-12-15 #>  9 Awtrey, Antonio     2025-04-17 N608  FALSE TRUE      2025-04-12 #> 10 Awtrey, Antonio     2025-02-17 W0341 FALSE TRUE      2025-04-12"},{"path":"https://docs.ropensci.org/coder/reference/cols.html","id":null,"dir":"Reference","previous_headings":"","what":"Return all columns from x with names matching ","title":"Return all columns from x with names matching ","text":"Return columns x names matching \"find\"","code":""},{"path":"https://docs.ropensci.org/coder/reference/cols.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return all columns from x with names matching ","text":"","code":"cols(find, x)"},{"path":"https://docs.ropensci.org/coder/reference/cols.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return all columns from x with names matching ","text":"find character vector names match x matrix","code":""},{"path":"https://docs.ropensci.org/coder/reference/copybig.html","id":null,"dir":"Reference","previous_headings":"","what":"Decide if large objects should be copied — copybig","title":"Decide if large objects should be copied — copybig","text":"Decide large objects copied","code":""},{"path":"https://docs.ropensci.org/coder/reference/copybig.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Decide if large objects should be copied — copybig","text":"","code":"copybig(x, .copy = NA)"},{"path":"https://docs.ropensci.org/coder/reference/copybig.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Decide if large objects should be copied — copybig","text":"x object (potentially large size) .copy object copied internally data.table::copy()? NA (default) means objects smaller 1 GB copied. size larger, argument must set explicitly. Set TRUE make copies regardless object size. recommended enough RAM available. set FALSE, calculations might carried object changed reference. IMPORTANT! might lead undesired consequences used absolutely necessary!","code":""},{"path":"https://docs.ropensci.org/coder/reference/copybig.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Decide if large objects should be copied — copybig","text":"Either x unchanged, fresh copy x.","code":""},{"path":"https://docs.ropensci.org/coder/reference/cps.html","id":null,"dir":"Reference","previous_headings":"","what":"Classcodes for the comorbidity-polypharmacy score (CPS) based on ICD-10 codes — cps","title":"Classcodes for the comorbidity-polypharmacy score (CPS) based on ICD-10 codes — cps","text":"Classcodes comorbidity-polypharmacy score (CPS) based ICD-10 codes","code":""},{"path":"https://docs.ropensci.org/coder/reference/cps.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Classcodes for the comorbidity-polypharmacy score (CPS) based on ICD-10 codes — cps","text":"","code":"cps"},{"path":"https://docs.ropensci.org/coder/reference/cps.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Classcodes for the comorbidity-polypharmacy score (CPS) based on ICD-10 codes — cps","text":"data frame 2 rows 2 variables: group comorbidity groups, either \"ordinary\" ICD-10-codes \"special\" codes beginning \"UA\", \"UB\" \"\" icd10 regular expressions identifying ICD-10 codes group only_ordinary index weights, 1 ordinary 0 special","code":""},{"path":"https://docs.ropensci.org/coder/reference/cps.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Classcodes for the comorbidity-polypharmacy score (CPS) based on ICD-10 codes — cps","text":"Stawicki, Stanislaw P., et al. \"Comorbidity polypharmacy score clinical utility: pragmatic practitioner's perspective.\" Journal emergencies, trauma, shock 8.4 (2015): 224.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/coder/reference/elixhauser.html","id":null,"dir":"Reference","previous_headings":"","what":"Classcodes for Elixhauser based on ICD-codes — elixhauser","title":"Classcodes for Elixhauser based on ICD-codes — elixhauser","text":"Solid tumors subordinate metastatic cancer. patient conditions still classified possible (weighted) index value account metastatic cancer. true \"diabetes uncomplicated\", subordinate \"diabetes complicated\". See Elixhauser et al. (1998).","code":""},{"path":"https://docs.ropensci.org/coder/reference/elixhauser.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Classcodes for Elixhauser based on ICD-codes — elixhauser","text":"","code":"elixhauser"},{"path":"https://docs.ropensci.org/coder/reference/elixhauser.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Classcodes for Elixhauser based on ICD-codes — elixhauser","text":"data frame 31 rows 8 variables: group comorbidity groups icd10 regular expressions identifying ICD-10 codes group. Corresponds column 'ICD-10' table 2 Quan et al. (2005). icd10_short regular expressions identifying first three characters ICD-10 codes group. alternative version added use emergency first three digits available. official version recommend use ! icd9cm Corresponds column 'Elixhauser's Original ICD-9-CM' table 2 Quan et al. (2005). icd9cm_ahrqweb Corresponds column 'Elixhauser AHRQ-Web ICD-9-CM' table 2 Quan et al. (2005). icd9cm_enhanced Corresponds column 'Enhanced ICD-9-CM' table 2 Quan et al. (2005). sum_all weights = 1 (thus weights) sum_all_ahrq sum_all excluding \"cardiac arrhythmia. Compare icd9cm_ahrqweb consider condition. walraven weights suggested Walraven et al. (2009) sid29 weights suggested Thompson et al. (2015) based conditions except cardiac arrhythmia sid30 weights suggested Thompson et al. (2015) based conditions ahrq_mort weights -hospital mortality suggested Moore et al. (2017) ahrq_readm weights readmissions suggested Moore et al. (2017)","code":""},{"path":"https://docs.ropensci.org/coder/reference/elixhauser.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Classcodes for Elixhauser based on ICD-codes — elixhauser","text":"Note \"DRG screen\" proposed table 1 Elixhauser et al. (1998) handled coder package. instead considered additional pre- post-processing step!","code":""},{"path":"https://docs.ropensci.org/coder/reference/elixhauser.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Classcodes for Elixhauser based on ICD-codes — elixhauser","text":"Elixhauser , Steiner C, Harris DR, Coffey RM (1998). Comorbidity Measures Use Administrative Data. Med Care. 1998;36(1):8–27. Moore, B. J., White, S., Washington, R., Coenen, N., & Elixhauser, . (2017). Identifying Increased Risk Readmission -hospital Mortality Using Hospital Administrative Data. Medical Care, 55(7), 698–705. Quan Hude et al. (2005). Coding algorithms defining comorbidities ICD-9-CM ICD-10 administrative data. Medical care, 1130-1139. Thompson, N. R., Fan, Y., Dalton, J. E., Jehi, L., Rosenbaum, B. P., Vadera, S., & Griffith, S. D. (2015). new Elixhauser-based comorbidity summary measure predict -hospital mortality. Med Care, 53(4), 374–379. Walraven, C. Van, Austin, P. C., Jennings, ., Quan, H., Alan, J., Walraven, C. Van, … Jennings, . (2009). Modification Elixhauser Comorbidity Measures Point System Hospital Death Using Administrative Data. Medical Care, 47(6), 626–633.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/coder/reference/ex_atc.html","id":null,"dir":"Reference","previous_headings":"","what":"Example data for random ATC codes — ex_atc","title":"Example data for random ATC codes — ex_atc","text":"Example data fictive people use testing examples.","code":""},{"path":"https://docs.ropensci.org/coder/reference/ex_atc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example data for random ATC codes — ex_atc","text":"","code":"ex_atc"},{"path":"https://docs.ropensci.org/coder/reference/ex_atc.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example data for random ATC codes — ex_atc","text":"Data frames 100 rows 2 variables: name random person names atc Random codes Anatomic Therapeutic Chemical classification (ATC) system. prescription random dates prescription medications corresponding ATC codes","code":""},{"path":[]},{"path":"https://docs.ropensci.org/coder/reference/ex_icd10.html","id":null,"dir":"Reference","previous_headings":"","what":"Example data for random codes assigned to random people — ex_icd10","title":"Example data for random codes assigned to random people — ex_icd10","text":"Example data fictive ICD-10-diagnoses use testing examples.","code":""},{"path":"https://docs.ropensci.org/coder/reference/ex_icd10.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example data for random codes assigned to random people — ex_icd10","text":"","code":"ex_icd10"},{"path":"https://docs.ropensci.org/coder/reference/ex_icd10.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example data for random codes assigned to random people — ex_icd10","text":"Data frames 1,000 rows 4 variables: id Random names corresponding column name dataset ex_people date random dates corresponding registered (comorbidity) codes code ICD-10 codes uranium_pathology dataset icd.data package Jack Wasey originating United States Transuranium Uranium Registries, published public domain. hdia boolean marker corresponding code main diagnose hospital visit (randomly assigned 10 percent codes)","code":""},{"path":"https://docs.ropensci.org/coder/reference/ex_icd10.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Example data for random codes assigned to random people — ex_icd10","text":"https://github.com/jackwasey/icd.data https://ustur.wsu.edu/-us/","code":""},{"path":[]},{"path":"https://docs.ropensci.org/coder/reference/ex_people.html","id":null,"dir":"Reference","previous_headings":"","what":"Example data for random people — ex_people","title":"Example data for random people — ex_people","text":"Example data fictive people use testing examples.","code":""},{"path":"https://docs.ropensci.org/coder/reference/ex_people.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example data for random people — ex_people","text":"","code":"ex_people"},{"path":"https://docs.ropensci.org/coder/reference/ex_people.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example data for random people — ex_people","text":"Data frames 100 rows 2 variables: name random person names surgery random dates relevant event","code":""},{"path":[]},{"path":"https://docs.ropensci.org/coder/reference/hip_ae_hailer.html","id":null,"dir":"Reference","previous_headings":"","what":"Classcodes for infection and dislocation after hip arthroplasty — hip_ae_hailer","title":"Classcodes for infection and dislocation after hip arthroplasty — hip_ae_hailer","text":"Classcodes infection dislocation hip arthroplasty","code":""},{"path":"https://docs.ropensci.org/coder/reference/hip_ae_hailer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Classcodes for infection and dislocation after hip arthroplasty — hip_ae_hailer","text":"","code":"hip_ae_hailer"},{"path":"https://docs.ropensci.org/coder/reference/hip_ae_hailer.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Classcodes for infection and dislocation after hip arthroplasty — hip_ae_hailer","text":"Data frame 3 columns: group Infection dislocation icd10 regular expressions based ICD-10 kva regular expressions based NOMESCO/KVA codes","code":""},{"path":[]},{"path":"https://docs.ropensci.org/coder/reference/index_fun.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate index based on classification scheme — index_fun","title":"Calculate index based on classification scheme — index_fun","text":"third step codify() %>% classify() %>% index(). function takes classified case data calculates (weighted) index sums specified weights classcodes object.","code":""},{"path":"https://docs.ropensci.org/coder/reference/index_fun.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate index based on classification scheme — index_fun","text":"","code":"index(classified, ...)  # S3 method for class 'data.frame' index(classified, ...)  # S3 method for class 'matrix' index(classified, index = NULL, cc = NULL, ...)"},{"path":"https://docs.ropensci.org/coder/reference/index_fun.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate index based on classification scheme — index_fun","text":"classified output classify() ... used internally index name column 'weights' corresponding classcodes object. Can NULL index just unweighted count identified groups. cc classcodes object. Can NULL classcodes object already available attribute classified (often case) /index = NULL.","code":""},{"path":"https://docs.ropensci.org/coder/reference/index_fun.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate index based on classification scheme — index_fun","text":"Named numeric index vector names corresponding rownames(classified)","code":""},{"path":"https://docs.ropensci.org/coder/reference/index_fun.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate index based on classification scheme — index_fun","text":"Index weights subordinate hierarchical classes (identified attr(cc, \"hierarchy\")) excluded presence superior classes index specified argument index.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/coder/reference/index_fun.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate index based on classification scheme — index_fun","text":"","code":"# Prepare some codified data with ICD-10 codes during 1 year (365 days) # before surgery x <-   codify(     ex_people,     ex_icd10,     id        = \"name\",     code      = \"icd10\",     date      = \"surgery\",     days      = c(-365, 0),     code_date = \"admission\"   )  # Classify those patients by the Charlson comorbidity indices cl <- classify(x, \"charlson\") #> Warning: 'classify()' does not preserve row order ('categorize()' does!) #> Classification based on: icd10  # Calculate (weighted) index values head(index(cl))                  # Un-weighted sum/no of conditions for each patient #> index calculated as number of relevant categories #>       Connelly, Monta  Garcia Hyett, Brenda Martinez Botello, Luz  #>                     0                     0                     0  #>     Marton, Gabriella        Mitchell, John          Nelson, Cory  #>                     0                     0                     0  head(index(cl, \"quan_original\")) # Weighted index (Quan et al. 2005; see `?charlson`) #>       Connelly, Monta  Garcia Hyett, Brenda Martinez Botello, Luz  #>                     0                     0                     0  #>     Marton, Gabriella        Mitchell, John          Nelson, Cory  #>                     0                     0                     0  head(index(cl, \"quan_updated\"))  # Weighted index (Quan et al. 2011; see `?charlson`) #>       Connelly, Monta  Garcia Hyett, Brenda Martinez Botello, Luz  #>                     0                     0                     0  #>     Marton, Gabriella        Mitchell, John          Nelson, Cory  #>                     0                     0                     0   # Tabulate index for all patients. # As expected, most patients are healthy and have index = 0/NA, # where NA indicates no recorded hospital visits # found in `ex_icd10` during codification. # In practice, those patients might be assumed to have 0 comorbidity as well. table(index(cl, \"quan_original\"), useNA = \"always\") #>  #>    0    1    2    3    6 <NA>  #>   74    5    4    1    1   15   # If `cl` is a matrix without additional attributes (as imposed by `codify()`) # an explicit classcodes object must be specified by the `cc` argument cl2 <- as.matrix(cl) head(index(cl2, cc = \"charlson\")) #> index calculated as number of relevant categories #>       Connelly, Monta  Garcia Hyett, Brenda Martinez Botello, Luz  #>                     0                     0                     0  #>     Marton, Gabriella        Mitchell, John          Nelson, Cory  #>                     0                     0                     0"},{"path":"https://docs.ropensci.org/coder/reference/print.classcodes.html","id":null,"dir":"Reference","previous_headings":"","what":"Print classcodes object — print.classcodes","title":"Print classcodes object — print.classcodes","text":"Print classcodes object","code":""},{"path":"https://docs.ropensci.org/coder/reference/print.classcodes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print classcodes object — print.classcodes","text":"","code":"# S3 method for class 'classcodes' print(x, n = NULL, ...)"},{"path":"https://docs.ropensci.org/coder/reference/print.classcodes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print classcodes object — print.classcodes","text":"x object type classcodes n number rows preview (n = 0 allowed) ... arguments passed print method tibble","code":""},{"path":[]},{"path":"https://docs.ropensci.org/coder/reference/print.classcodes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print classcodes object — print.classcodes","text":"","code":"# Default printing elixhauser #>  #> Classcodes object #>   #> Regular expressions: #>    icd10, icd10_short, icd9cm, icd9cm_ahrqweb, icd9cm_enhanced  #> Indices: #>    sum_all, sum_all_ahrq, walraven, sid29, sid30, ahrq_mort, ahrq_readm  #> Hierarchy: #>    c(\"metastatic cancer\", \"solid tumor\"), #>    c(\"diabetes uncomplicated\", \"diabetes complicated\")  #>  #> # A tibble: 31 × 13 #>    group         icd10 icd10_short icd9cm icd9cm_ahrqweb icd9cm_enhanced sum_all #>    <chr>         <chr> <chr>       <chr>  <chr>          <chr>             <dbl> #>  1 congestive h… I(09… I(09|1[13]… 39891… 39891|4(0(2[0… 39891|4(0(2[01…       1 #>  2 cardiac arrh… I(44… I(4[457-9]… 42(6(… NA             42(6([079|1[02…       1 #>  3 valvular dis… A520… A52|I(0[5-… 0932|… 0932|39([4-6]… 0932|39[4-7]|4…       1 #>  4 pulmonary ci… I(2(… I2[678]     41(6|… 41(6|79)       41(5[01]|6|7[0…       1 #>  5 peripheral v… I7([… I7[01389]|… 44(0|… 44([0-2]|3[1-… 0930|4(373|4([…       1 #>  6 hypertension… I10   I10         401[1… 401[19]|6420   401                   1 #>  7 hypertension… I1[1… I1[1-35]    40([2… 40(10|[2-5])|… 40[2-5]               1 #>  8 paralysis     G(04… G(04|11|8[… 34(2[… 34[2-4]|438[2… 3(341|4([23]|4…       1 #>  9 other neurol… G(1[… G(1[0-3]|2… 3(3(1… 3(3([0145]|20… 3(3(19|2[01]|3…       1 #> 10 chronic pulm… (I27… I27|(J([46… 49(([… 49|50([0-5]|6… 4(16[89]|90)|5…       1 #> # ℹ 21 more rows #> # ℹ 6 more variables: sum_all_ahrq <dbl>, walraven <dbl>, sid29 <dbl>, #> #   sid30 <dbl>, ahrq_mort <dbl>, ahrq_readm <dbl>  # Print attributes data but no data preview print(elixhauser, n = 0) #>  #> Classcodes object #>   #> Regular expressions: #>    icd10, icd10_short, icd9cm, icd9cm_ahrqweb, icd9cm_enhanced  #> Indices: #>    sum_all, sum_all_ahrq, walraven, sid29, sid30, ahrq_mort, ahrq_readm  #> Hierarchy: #>    c(\"metastatic cancer\", \"solid tumor\"), #>    c(\"diabetes uncomplicated\", \"diabetes complicated\")  #>   # Print all rows print(elixhauser, n = 31) #>  #> Classcodes object #>   #> Regular expressions: #>    icd10, icd10_short, icd9cm, icd9cm_ahrqweb, icd9cm_enhanced  #> Indices: #>    sum_all, sum_all_ahrq, walraven, sid29, sid30, ahrq_mort, ahrq_readm  #> Hierarchy: #>    c(\"metastatic cancer\", \"solid tumor\"), #>    c(\"diabetes uncomplicated\", \"diabetes complicated\")  #>  #> # A tibble: 31 × 13 #>    group         icd10 icd10_short icd9cm icd9cm_ahrqweb icd9cm_enhanced sum_all #>    <chr>         <chr> <chr>       <chr>  <chr>          <chr>             <dbl> #>  1 congestive h… I(09… I(09|1[13]… 39891… 39891|4(0(2[0… 39891|4(0(2[01…       1 #>  2 cardiac arrh… I(44… I(4[457-9]… 42(6(… NA             42(6([079|1[02…       1 #>  3 valvular dis… A520… A52|I(0[5-… 0932|… 0932|39([4-6]… 0932|39[4-7]|4…       1 #>  4 pulmonary ci… I(2(… I2[678]     41(6|… 41(6|79)       41(5[01]|6|7[0…       1 #>  5 peripheral v… I7([… I7[01389]|… 44(0|… 44([0-2]|3[1-… 0930|4(373|4([…       1 #>  6 hypertension… I10   I10         401[1… 401[19]|6420   401                   1 #>  7 hypertension… I1[1… I1[1-35]    40([2… 40(10|[2-5])|… 40[2-5]               1 #>  8 paralysis     G(04… G(04|11|8[… 34(2[… 34[2-4]|438[2… 3(341|4([23]|4…       1 #>  9 other neurol… G(1[… G(1[0-3]|2… 3(3(1… 3(3([0145]|20… 3(3(19|2[01]|3…       1 #> 10 chronic pulm… (I27… I27|(J([46… 49(([… 49|50([0-5]|6… 4(16[89]|90)|5…       1 #> 11 diabetes unc… E1[0… E1[0-4]     250[0… 250[0-3]|6480  250[0-3]              1 #> 12 diabetes com… E1[0… E1[0-4]     250[4… 250[4-9]|7751  250[4-9]              1 #> 13 hypothyroidi… E(0[… E(0[0-3]|8… 24(3|… 24(3|4[0-2]|4… 24(09|[34]|6[1…       1 #> 14 renal failure I(12… I(1[23])|N… 40(3(… 40(3([019]1)|… 40(3([019]1)|4…       1 #> 15 liver disease B18|… B18|I(8[56… 070(3… 070([23]{2}|[… 070([23]{2}|[4…       1 #> 16 peptic ulcer… K2[5… K2[5-8]     53([1… 53([1-4]([4-6… 53[1-4][79]           1 #> 17 AIDS/HIV      B2[0… B2[0-24]    04[2-… 04[2-4]        04[2-4]               1 #> 18 lymphoma      C(8[… C(8[1-58]|… 2(0([… 2(0([01]|2[0-… 2(0([0-2]|30)|…       1 #> 19 metastatic c… C(7[… C(7[7-9]|8… 19[6-… 19[6-9]        19[6-9]               1 #> 20 solid tumor   C([0… C([01]|2[0… 1([4-… 1([4-68]|7([0… 1([4-68]|7[0-2…       1 #> 21 rheumatoid a… L94[… L94|M(0[56… 7(010… 7(010|1[04]|2… 446|7(010|1(0[…       1 #> 22 coagulopathy  D6([… D6[5-9]     28(6|… 28(6|7[13-5])  28(6|7[13-5])         1 #> 23 obesity       E66   E66         2780   2780           2780                  1 #> 24 weight loss   E4[0… E4[0-6]|R6… 26[0-… 26[0-3]|7832   26[0-3]|7(832|…       1 #> 25 fluid electr… E(22… E(22|8[67]) 276    276            2(53|7)6              1 #> 26 blood loss a… D500  D50         2800   2800|6482      2800                  1 #> 27 deficiency a… D5(0… D5[0-3]     28(0[… 28(0[1-9]|1|5… 28(0[1-9]|1)          1 #> 28 alcohol abuse F10|… F10|E52|G6… 29(1[… 291[0-3589]|3… 2(652|9(1[1-35…       1 #> 29 drug abuse    F1[1… F1[1-689]|… 292(0… 292(0|8[2-9]|… 292|30(4|5[2-9…       1 #> 30 psychoses     F(2[… F(2[02-589… 29([5… 29([5-8]|91)   29(38|9([578]|…       1 #> 31 depression    F(20… F(20|3[1-4… 3(0(0… 3(0(04|112|9[… 29(6[235])|3(0…      NA #> # ℹ 6 more variables: sum_all_ahrq <dbl>, walraven <dbl>, sid29 <dbl>, #> #   sid30 <dbl>, ahrq_mort <dbl>, ahrq_readm <dbl>"},{"path":"https://docs.ropensci.org/coder/reference/print.classified.html","id":null,"dir":"Reference","previous_headings":"","what":"Printing classified data — print.classified","title":"Printing classified data — print.classified","text":"Preview first n rows tibble","code":""},{"path":"https://docs.ropensci.org/coder/reference/print.classified.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Printing classified data — print.classified","text":"","code":"# S3 method for class 'classified' print(x, ...)"},{"path":"https://docs.ropensci.org/coder/reference/print.classified.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Printing classified data — print.classified","text":"x output classify() ... additional arguments passed printing method tibble. n number rows preview. Set n = NULL disable tibble preview print object (matrix).","code":""},{"path":[]},{"path":"https://docs.ropensci.org/coder/reference/print.classified.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Printing classified data — print.classified","text":"","code":"# Preview all output classify(c(\"C80\", \"I20\", \"unvalid_code\"), \"elixhauser\") #> Classification based on: icd10 #>  #> The printed data is of class: classified, matrix. #> It has 3 row(s). #> It is here previewed as a tibble #> Use `print(x, n = NULL)` to print as is (or use `n` to specify the number of rows to preview)! #>  #> # A tibble: 3 × 31 #>   `congestive heart failure` `cardiac arrhythmias` `valvular disease` #>   <lgl>                      <lgl>                 <lgl>              #> 1 FALSE                      FALSE                 FALSE              #> 2 FALSE                      FALSE                 FALSE              #> 3 FALSE                      FALSE                 FALSE              #> # ℹ 28 more variables: `pulmonary circulation disorder` <lgl>, #> #   `peripheral vascular disorder` <lgl>, `hypertension uncomplicated` <lgl>, #> #   `hypertension complicated` <lgl>, paralysis <lgl>, #> #   `other neurological disorders` <lgl>, `chronic pulmonary disease` <lgl>, #> #   `diabetes uncomplicated` <lgl>, `diabetes complicated` <lgl>, #> #   hypothyroidism <lgl>, `renal failure` <lgl>, `liver disease` <lgl>, #> #   `peptic ulcer disease` <lgl>, `AIDS/HIV` <lgl>, lymphoma <lgl>, …  # Preview only the first row print(classify(c(\"C80\", \"I20\", \"unvalid_code\"), \"elixhauser\"), n = 1) #> Classification based on: icd10 #>  #> The printed data is of class: classified, matrix. #> It has 3 row(s). #> It is here previewed as a tibble #> Use `print(x, n = NULL)` to print as is (or use `n` to specify the number of rows to preview)! #>  #> # A tibble: 1 × 31 #>   `congestive heart failure` `cardiac arrhythmias` `valvular disease` #>   <lgl>                      <lgl>                 <lgl>              #> 1 FALSE                      FALSE                 FALSE              #> # ℹ 28 more variables: `pulmonary circulation disorder` <lgl>, #> #   `peripheral vascular disorder` <lgl>, `hypertension uncomplicated` <lgl>, #> #   `hypertension complicated` <lgl>, paralysis <lgl>, #> #   `other neurological disorders` <lgl>, `chronic pulmonary disease` <lgl>, #> #   `diabetes uncomplicated` <lgl>, `diabetes complicated` <lgl>, #> #   hypothyroidism <lgl>, `renal failure` <lgl>, `liver disease` <lgl>, #> #   `peptic ulcer disease` <lgl>, `AIDS/HIV` <lgl>, lymphoma <lgl>, …  # Print object as is (matrix) print(classify(c(\"C80\", \"I20\", \"unvalid_code\"), \"elixhauser\"), n = NULL) #> Classification based on: icd10 #>  #> The printed data is of class: classified, matrix. #> It has 3 row(s). #> It is here previewed as a tibble #> Use `print(x, n = NULL)` to print as is (or use `n` to specify the number of rows to preview)! #>  #> # A tibble: 3 × 31 #>   `congestive heart failure` `cardiac arrhythmias` `valvular disease` #>   <lgl>                      <lgl>                 <lgl>              #> 1 FALSE                      FALSE                 FALSE              #> 2 FALSE                      FALSE                 FALSE              #> 3 FALSE                      FALSE                 FALSE              #> # ℹ 28 more variables: `pulmonary circulation disorder` <lgl>, #> #   `peripheral vascular disorder` <lgl>, `hypertension uncomplicated` <lgl>, #> #   `hypertension complicated` <lgl>, paralysis <lgl>, #> #   `other neurological disorders` <lgl>, `chronic pulmonary disease` <lgl>, #> #   `diabetes uncomplicated` <lgl>, `diabetes complicated` <lgl>, #> #   hypothyroidism <lgl>, `renal failure` <lgl>, `liver disease` <lgl>, #> #   `peptic ulcer disease` <lgl>, `AIDS/HIV` <lgl>, lymphoma <lgl>, …"},{"path":"https://docs.ropensci.org/coder/reference/reexports.html","id":null,"dir":"Reference","previous_headings":"","what":"Objects exported from other packages — reexports","title":"Objects exported from other packages — reexports","text":"objects imported packages. Follow links see documentation. generics visualize tibble %>%","code":""},{"path":"https://docs.ropensci.org/coder/reference/rxriskv.html","id":null,"dir":"Reference","previous_headings":"","what":"Classcodes for RxRisk V based on ATC codes — rxriskv","title":"Classcodes for RxRisk V based on ATC codes — rxriskv","text":"Note desired implementation might differ time country.","code":""},{"path":"https://docs.ropensci.org/coder/reference/rxriskv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Classcodes for RxRisk V based on ATC codes — rxriskv","text":"","code":"rxriskv"},{"path":"https://docs.ropensci.org/coder/reference/rxriskv.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Classcodes for RxRisk V based on ATC codes — rxriskv","text":"Data frames 46 rows 6 variables: group medical condition pratt ATC codes table 1 Pratt et al. 2018 (ignoring PBS item codes extra conditions). garland Modified version Anne Garland resemble medical use Sweden 2016 (Unpublished). caughey appendix 1 Caughey et al. 2010 pratt Mortality weights table 1 Pratt et al. 2018 sum_all Unweighted count conditions.","code":""},{"path":"https://docs.ropensci.org/coder/reference/rxriskv.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Classcodes for RxRisk V based on ATC codes — rxriskv","text":"Caughey GE, Roughead EE, Vitry AI, McDermott RA, Shakib S, Gilbert AL. Comorbidity elderly diabetes: Identification areas potential treatment conflicts. Diabetes Res Clin Pract 2010;87:385–93. Pratt NL, Kerr M, Barratt JD, Kemp-Casey , Kalisch Ellett LM, Ramsay E, et al. validity Rx-Risk Comorbidity Index using medicines mapped Anatomical Therapeutic Chemical (ATC) Classification System. BMJ Open 2018;8.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/coder/reference/set_classcodes.html","id":null,"dir":"Reference","previous_headings":"","what":"Set classcodes object — set_classcodes","title":"Set classcodes object — set_classcodes","text":"Prepare classcodesobject specifying regular expressions use classification.","code":""},{"path":"https://docs.ropensci.org/coder/reference/set_classcodes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set classcodes object — set_classcodes","text":"","code":"set_classcodes(   cc,   classified = NULL,   regex = NULL,   start = TRUE,   stop = FALSE,   tech_names = NULL )"},{"path":"https://docs.ropensci.org/coder/reference/set_classcodes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set classcodes object — set_classcodes","text":"cc classcodes object (name default object all_classcodes()). classified object classcodes inherited regex name column regular expressions use classification. NULL (default) uses attr(obj, \"regexpr\")[1]. start, stop codes start/end specified regular expressions? TRUE, column \"regex\" prefixed/suffixed ^/$. tech_names technical column names used? FALSE, colnames taken directly group names cc, TRUE, changed technical names avoiding special characters prefixed name classification scheme. NULL (default) preserves previous names cc inherited classified (fall backs FALSE already set).","code":""},{"path":"https://docs.ropensci.org/coder/reference/set_classcodes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set classcodes object — set_classcodes","text":"classcodes object.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/coder/reference/set_classcodes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set classcodes object — set_classcodes","text":"","code":"# Prepare a classcodes object for the Charlson comorbidity classification # based on the default regular expressions set_classcodes(charlson)   # by object #> Classification based on: icd10 #>  #> Classcodes object #>   #> Regular expressions: #>    icd10  #> Indices: #>    charlson, deyo_ramano, dhoore, ghali, quan_original, quan_updated    #>  #> # A tibble: 17 × 9 #>    group       description icd10 charlson deyo_ramano dhoore ghali quan_original #>    <chr>       <chr>       <chr>    <dbl>       <dbl>  <dbl> <dbl>         <dbl> #>  1 myocardial… Acute myoc… ^(I2…        1           1      1     1             1 #>  2 congestive… Heart fail… ^(I(…        1           1      1     4             1 #>  3 peripheral… Peripheral… ^(I7…        1           1      1     2             1 #>  4 cerebrovas… Cerebrovas… ^(G4…        1           1      1     1             1 #>  5 dementia    Senile and… ^(F0…        1           1      1     0             1 #>  6 chronic pu… Chronic ob… ^((I…        1           1      1     0             1 #>  7 rheumatic … Systemic l… ^(M(…        1           1      1     0             1 #>  8 peptic ulc… Gastric, d… ^(K2…        1           1      1     0             1 #>  9 mild liver… Alcoholic … ^(B1…        1           1      1     0             1 #> 10 diabetes w… Diabetes w… ^(E1…        1           1      1     0             1 #> 11 hemiplegia… Paraplegia… ^(G(…        2           1      1     0             2 #> 12 renal dise… Chronic gl… ^(I1…        2           1      1     3             2 #> 13 diabetes c… Diabetes w… ^(E1…        2           1      1     0             2 #> 14 malignancy  Malignant … ^(C(…        2           1      1     0             2 #> 15 moderate o… Hepatic co… ^(I(…        3           1      1     0             3 #> 16 metastatic… Secondary … ^(C(…        6           1      1     0             6 #> 17 AIDS/HIV    HIV infect… ^(B2…        6           1      1     0             6 #> # ℹ 1 more variable: quan_updated <dbl> set_classcodes(\"charlson\") # by name #> Classification based on: icd10 #>  #> Classcodes object #>   #> Regular expressions: #>    icd10  #> Indices: #>    charlson, deyo_ramano, dhoore, ghali, quan_original, quan_updated    #>  #> # A tibble: 17 × 9 #>    group       description icd10 charlson deyo_ramano dhoore ghali quan_original #>    <chr>       <chr>       <chr>    <dbl>       <dbl>  <dbl> <dbl>         <dbl> #>  1 myocardial… Acute myoc… ^(I2…        1           1      1     1             1 #>  2 congestive… Heart fail… ^(I(…        1           1      1     4             1 #>  3 peripheral… Peripheral… ^(I7…        1           1      1     2             1 #>  4 cerebrovas… Cerebrovas… ^(G4…        1           1      1     1             1 #>  5 dementia    Senile and… ^(F0…        1           1      1     0             1 #>  6 chronic pu… Chronic ob… ^((I…        1           1      1     0             1 #>  7 rheumatic … Systemic l… ^(M(…        1           1      1     0             1 #>  8 peptic ulc… Gastric, d… ^(K2…        1           1      1     0             1 #>  9 mild liver… Alcoholic … ^(B1…        1           1      1     0             1 #> 10 diabetes w… Diabetes w… ^(E1…        1           1      1     0             1 #> 11 hemiplegia… Paraplegia… ^(G(…        2           1      1     0             2 #> 12 renal dise… Chronic gl… ^(I1…        2           1      1     3             2 #> 13 diabetes c… Diabetes w… ^(E1…        2           1      1     0             2 #> 14 malignancy  Malignant … ^(C(…        2           1      1     0             2 #> 15 moderate o… Hepatic co… ^(I(…        3           1      1     0             3 #> 16 metastatic… Secondary … ^(C(…        6           1      1     0             6 #> 17 AIDS/HIV    HIV infect… ^(B2…        6           1      1     0             6 #> # ℹ 1 more variable: quan_updated <dbl>  # Same as above but based on regular expressions for ICD-8 (see `?charlson`) set_classcodes(charlson, regex = \"icd8_brusselaers\") #>  #> Classcodes object #>   #> Regular expressions: #>    icd8_brusselaers  #> Indices: #>    charlson, deyo_ramano, dhoore, ghali, quan_original, quan_updated    #>  #> # A tibble: 13 × 9 #>    group          description icd8_brusselaers charlson deyo_ramano dhoore ghali #>    <chr>          <chr>       <chr>               <dbl>       <dbl>  <dbl> <dbl> #>  1 myocardial in… Acute myoc… ^(41[0-2])              1           1      1     1 #>  2 congestive he… Heart fail… ^(4270|428)             1           1      1     4 #>  3 peripheral va… Peripheral… ^(44[0-5])              1           1      1     2 #>  4 cerebrovascul… Cerebrovas… ^(43[0-8])              1           1      1     1 #>  5 dementia       Senile and… ^(290[01])              1           1      1     0 #>  6 chronic pulmo… Chronic ob… ^(49[0-3]|51[5-…        1           1      1     0 #>  7 rheumatic dis… Systemic l… ^(7(1[0-2]|34))         1           1      1     0 #>  8 hemiplegia or… Paraplegia… ^(344)                  2           1      1     0 #>  9 renal disease  Chronic gl… ^(40[34]|58[0-3…        2           1      1     3 #> 10 diabetes comp… Diabetes w… ^(250)                  2           1      1     0 #> 11 malignancy     Malignant … ^(1([4-68][0-9]…        2           1      1     0 #> 12 moderate or s… Hepatic co… ^(070|4560|51[1…        3           1      1     0 #> 13 metastatic so… Secondary … ^(19[6-9])              6           1      1     0 #> # ℹ 2 more variables: quan_original <dbl>, quan_updated <dbl>  # Only recognize codes if no other characters are found after the relevant codes # Hence if the code vector stops with the code set_classcodes(charlson, stop = TRUE) #> Classification based on: icd10 #>  #> Classcodes object #>   #> Regular expressions: #>    icd10  #> Indices: #>    charlson, deyo_ramano, dhoore, ghali, quan_original, quan_updated    #>  #> # A tibble: 17 × 9 #>    group       description icd10 charlson deyo_ramano dhoore ghali quan_original #>    <chr>       <chr>       <chr>    <dbl>       <dbl>  <dbl> <dbl>         <dbl> #>  1 myocardial… Acute myoc… ^(I2…        1           1      1     1             1 #>  2 congestive… Heart fail… ^(I(…        1           1      1     4             1 #>  3 peripheral… Peripheral… ^(I7…        1           1      1     2             1 #>  4 cerebrovas… Cerebrovas… ^(G4…        1           1      1     1             1 #>  5 dementia    Senile and… ^(F0…        1           1      1     0             1 #>  6 chronic pu… Chronic ob… ^((I…        1           1      1     0             1 #>  7 rheumatic … Systemic l… ^(M(…        1           1      1     0             1 #>  8 peptic ulc… Gastric, d… ^(K2…        1           1      1     0             1 #>  9 mild liver… Alcoholic … ^(B1…        1           1      1     0             1 #> 10 diabetes w… Diabetes w… ^(E1…        1           1      1     0             1 #> 11 hemiplegia… Paraplegia… ^(G(…        2           1      1     0             2 #> 12 renal dise… Chronic gl… ^(I1…        2           1      1     3             2 #> 13 diabetes c… Diabetes w… ^(E1…        2           1      1     0             2 #> 14 malignancy  Malignant … ^(C(…        2           1      1     0             2 #> 15 moderate o… Hepatic co… ^(I(…        3           1      1     0             3 #> 16 metastatic… Secondary … ^(C(…        6           1      1     0             6 #> 17 AIDS/HIV    HIV infect… ^(B2…        6           1      1     0             6 #> # ℹ 1 more variable: quan_updated <dbl>  # Accept code vectors with strings which do not necessarily start with the code. # This is useful if the code might appear in the middle of a longer character # string or if a common prefix is used for all codes. set_classcodes(charlson, start = FALSE) #> Classification based on: icd10 #>  #> Classcodes object #>   #> Regular expressions: #>    icd10  #> Indices: #>    charlson, deyo_ramano, dhoore, ghali, quan_original, quan_updated    #>  #> # A tibble: 17 × 9 #>    group       description icd10 charlson deyo_ramano dhoore ghali quan_original #>    <chr>       <chr>       <chr>    <dbl>       <dbl>  <dbl> <dbl>         <dbl> #>  1 myocardial… Acute myoc… I2([…        1           1      1     1             1 #>  2 congestive… Heart fail… I(09…        1           1      1     4             1 #>  3 peripheral… Peripheral… I7([…        1           1      1     2             1 #>  4 cerebrovas… Cerebrovas… G4[5…        1           1      1     1             1 #>  5 dementia    Senile and… F0([…        1           1      1     0             1 #>  6 chronic pu… Chronic ob… (I27…        1           1      1     0             1 #>  7 rheumatic … Systemic l… M(0[…        1           1      1     0             1 #>  8 peptic ulc… Gastric, d… K2[5…        1           1      1     0             1 #>  9 mild liver… Alcoholic … B18|…        1           1      1     0             1 #> 10 diabetes w… Diabetes w… E1[0…        1           1      1     0             1 #> 11 hemiplegia… Paraplegia… G(04…        2           1      1     0             2 #> 12 renal dise… Chronic gl… I1(2…        2           1      1     3             2 #> 13 diabetes c… Diabetes w… E1[0…        2           1      1     0             2 #> 14 malignancy  Malignant … C([0…        2           1      1     0             2 #> 15 moderate o… Hepatic co… I(8(…        3           1      1     0             3 #> 16 metastatic… Secondary … C(7[…        6           1      1     0             6 #> 17 AIDS/HIV    HIV infect… B2[0…        6           1      1     0             6 #> # ℹ 1 more variable: quan_updated <dbl>  # Use technical names to clearly describe the origin of each group. # Note that the `cc` argument must be specified by a character string # since this name is used as part of the column names x <- set_classcodes(\"charlson\", tech_names = TRUE) #> Classification based on: icd10 x$group #>  [1] \"charlson_icd10_myocardial_infarction\"            #>  [2] \"charlson_icd10_congestive_heart_failure\"         #>  [3] \"charlson_icd10_peripheral_vascular_disease\"      #>  [4] \"charlson_icd10_cerebrovascular_disease\"          #>  [5] \"charlson_icd10_dementia\"                         #>  [6] \"charlson_icd10_chronic_pulmonary_disease\"        #>  [7] \"charlson_icd10_rheumatic_disease\"                #>  [8] \"charlson_icd10_peptic_ulcer_disease\"             #>  [9] \"charlson_icd10_mild_liver_disease\"               #> [10] \"charlson_icd10_diabetes_without_complication\"    #> [11] \"charlson_icd10_hemiplegia_or_paraplegia\"         #> [12] \"charlson_icd10_renal_disease\"                    #> [13] \"charlson_icd10_diabetes_complication\"            #> [14] \"charlson_icd10_malignancy\"                       #> [15] \"charlson_icd10_moderate_or_severe_liver_disease\" #> [16] \"charlson_icd10_metastatic_solid_tumor\"           #> [17] \"charlson_icd10_aids_hiv\""},{"path":"https://docs.ropensci.org/coder/reference/summary.classcodes.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarizing a classcodes object — summary.classcodes","title":"Summarizing a classcodes object — summary.classcodes","text":"Classification schemes formalized regular expressions within classcodes objects. computationally effective sometimes hard interpret. Use function list codes identified group.","code":""},{"path":"https://docs.ropensci.org/coder/reference/summary.classcodes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarizing a classcodes object — summary.classcodes","text":"","code":"# S3 method for class 'classcodes' summary(object, coding, ..., cc_args = list())  # S3 method for class 'summary.classcodes' print(x, ...)"},{"path":"https://docs.ropensci.org/coder/reference/summary.classcodes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarizing a classcodes object — summary.classcodes","text":"object classcodes object coding either vector codes original classification, name (character vector length one) keyvalue object package \"decoder\" (example \"icd10cm\" \"atc\") ... summary.classcodes(): ignored print.summary.classcodes(): arguments passed tibble:::print.tbl() cc_args List named arguments passed set_classcodes() x output summary.classcodes()","code":""},{"path":"https://docs.ropensci.org/coder/reference/summary.classcodes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarizing a classcodes object — summary.classcodes","text":"Methods primarily called side effects (printing screen) additional invisible objects returned: summary.classcodes(): list input arguments object coding unchanged, well data frame (summary) columns groups identified (group); number codes recognized group (n) individual codes within group (codes). print.summary.classcodes(): argument x unchanged","code":""},{"path":[]},{"path":"https://docs.ropensci.org/coder/reference/summary.classcodes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarizing a classcodes object — summary.classcodes","text":"","code":"# summary.classcodes() ----------------------------------------------------  # Summarize all ICD-10-CM codes identified by the Elixhauser # comorbidity classification # See `?decoder::icd10cm` for details summary(elixhauser, coding = \"icd10cm\") #> Classification based on: icd10 #>  #> Summary of classcodes object #>  #> Recognized codes per group: #>  #> # A tibble: 31 × 3 #>    group                         n codes                                         #>    <chr>                     <int> <chr>                                         #>  1 AIDS/HIV                      1 B20                                           #>  2 alcohol abuse               131 E52, F1010, F1011, F10120, F10121, F10129, F… #>  3 blood loss anemia             1 D500                                          #>  4 cardiac arrhythmias          73 I441, I442, I4430, I4439, I456, I459, I470, … #>  5 chronic pulmonary disease    69 I27812, I27822, I27832, I27892, I2792, J40, … #>  6 coagulopathy                 27 D65, D66, D67, D680, D681, D682, D68311, D68… #>  7 congestive heart failure     36 I099, I1101, I1301, I1321, I255, I420, I425,… #>  8 deficiency anemia            17 D508, D509, D510, D511, D512, D513, D518, D5… #>  9 depression                   31 F3130, F3131, F3132, F314, F3152, F320, F321… #> 10 diabetes complicated        243 E1021, E1022, E1029, E10311, E10319, E103211… #> # ℹ 21 more rows #>  #>  Use function visualize() for a graphical representation.  # Is there a difference if instead considering the Swedish ICD-10-SE? # See `?decoder::icd10se` for details summary(elixhauser, coding = \"icd10se\") #> Classification based on: icd10 #>  #> Summary of classcodes object #>  #> Recognized codes per group: #>  #> # A tibble: 31 × 3 #>    group                         n codes                                         #>    <chr>                     <int> <chr>                                         #>  1 AIDS/HIV                     22 B200, B201, B202, B203, B204, B205, B206, B2… #>  2 alcohol abuse                30 E529, F100, F101, F102, F102A, F102B, F102X,… #>  3 blood loss anemia             1 D500                                          #>  4 cardiac arrhythmias          45 I441, I441A, I441B, I442, I443, I456, I456A,… #>  5 chronic pulmonary disease    57 I2782, I2792, J409, J410, J411, J418, J429, … #>  6 coagulopathy                 29 D659, D669, D679, D680, D681, D682, D683, D6… #>  7 congestive heart failure     19 I099, I1101, I1301, I1321, I255, I420, I425,… #>  8 deficiency anemia            17 D508, D509, D510, D511, D512, D513, D518, D5… #>  9 depression                   22 F2042, F313, F314, F3152, F320, F321, F322, … #> 10 diabetes complicated         93 E102, E102A, E102B, E102C, E102W, E102X, E10… #> # ℹ 21 more rows #>  #>  Use function visualize() for a graphical representation.  # Which ICD-9-CM diagnostics codes are recognized by Charlson according to # Brusselears et al. 2017 (see `?charlson`) summary(   charlson, coding = \"icd9cmd\",   cc_args = list(regex = \"icd9_brusselaers\") ) #>  #> Summary of classcodes object #>  #> Recognized codes per group: #>  #> # A tibble: 13 × 3 #>    group                             n codes                                     #>    <chr>                         <int> <chr>                                     #>  1 cerebrovascular disease          69 430, 431, 4320, 4321, 4329, 43300, 43301… #>  2 chronic pulmonary disease        48 4160, 4161, 4162, 4168, 4169, 490, 4910,… #>  3 congestive heart failure         45 40200, 40201, 40210, 40211, 40290, 40291… #>  4 dementia                         21 2900, 29010, 29011, 29012, 29013, 29020,… #>  5 diabetes complication            31 1960, 1961, 1962, 1963, 1965, 1966, 1968… #>  6 diabetes without complication    40 25000, 25001, 25002, 25003, 25010, 25011… #>  7 hemiplegia or paraplegia        628 1400, 1401, 1403, 1404, 1405, 1406, 1408… #>  8 mild liver disease               67 40300, 40301, 40310, 40311, 40390, 40391… #>  9 myocardial infarction            31 41000, 41001, 41002, 41010, 41011, 41012… #> 10 peptic ulcer disease             39 34200, 34201, 34202, 34210, 34211, 34212… #> 11 peripheral vascular disease      82 4400, 4401, 44020, 44021, 44022, 44023, … #> 12 renal disease                    50 0700, 0701, 07020, 07021, 07022, 07023, … #> 13 rheumatic disease               179 7100, 7101, 7102, 7103, 7104, 7105, 7108… #>  #>  Use function visualize() for a graphical representation.   # print.summary.classcodes() ----------------------------------------------  # Print all 31 lines of the summarized Elixhauser classcodes object print(   summary(elixhauser, coding = \"icd10cm\"),   n = 31 ) #> Classification based on: icd10 #>  #> Summary of classcodes object #>  #> Recognized codes per group: #>  #> # A tibble: 31 × 3 #>    group                              n codes                                    #>    <chr>                          <int> <chr>                                    #>  1 AIDS/HIV                           1 B20                                      #>  2 alcohol abuse                    131 E52, F1010, F1011, F10120, F10121, F101… #>  3 blood loss anemia                  1 D500                                     #>  4 cardiac arrhythmias               73 I441, I442, I4430, I4439, I456, I459, I… #>  5 chronic pulmonary disease         69 I27812, I27822, I27832, I27892, I2792, … #>  6 coagulopathy                      27 D65, D66, D67, D680, D681, D682, D68311… #>  7 congestive heart failure          36 I099, I1101, I1301, I1321, I255, I420, … #>  8 deficiency anemia                 17 D508, D509, D510, D511, D512, D513, D51… #>  9 depression                        31 F3130, F3131, F3132, F314, F3152, F320,… #> 10 diabetes complicated             243 E1021, E1022, E1029, E10311, E10319, E1… #> 11 diabetes uncomplicated            13 E1010, E1011, E109, E1100, E1101, E1110… #> 12 drug abuse                       361 F1110, F1111, F11120, F11121, F11122, F… #> 13 fluid electrolyte disorders       15 E222, E860, E861, E869, E870, E871, E87… #> 14 hypertension complicated          13 I1102, I119, I1201, I129, I1302, I13101… #> 15 hypertension uncomplicated         1 I10                                      #> 16 hypothyroidism                    18 E000, E001, E002, E009, E010, E011, E01… #> 17 liver disease                     56 B180, B181, B182, B188, B189, I8500, I8… #> 18 lymphoma                         373 C8100, C8101, C8102, C8103, C8104, C810… #> 19 metastatic cancer                 47 C770, C771, C772, C773, C774, C775, C77… #> 20 obesity                            7 E6601, E6609, E661, E662, E663, E668, E… #> 21 other neurological disorders     115 G10, G110, G111, G112, G113, G1142, G11… #> 22 paralysis                         45 G041, G1141, G801, G802, G8100, G8101, … #> 23 peptic ulcer disease               8 K257, K259, K267, K269, K277, K279, K28… #> 24 peripheral vascular disorder     274 I700, I701, I70201, I70202, I70203, I70… #> 25 psychoses                         20 F200, F201, F202, F203, F205, F2081, F2… #> 26 pulmonary circulation disorder    24 I2601, I2602, I2609, I2690, I2692, I269… #> 27 renal failure                     16 I1202, I13102, I13112, N181, N182, N183… #> 28 rheumatoid arthritis             572 L940, L941, L943, M0500, M05011, M05012… #> 29 solid tumor                      485 C000, C001, C002, C003, C004, C005, C00… #> 30 valvular disease                  61 A5200, A5201, A5202, A5203, A5204, A520… #> 31 weight loss                       10 E40, E41, E42, E43, E440, E441, E45, E4… #>  #>  Use function visualize() for a graphical representation."},{"path":"https://docs.ropensci.org/coder/reference/visualize.classcodes.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualize classification scheme in web browser — visualize.classcodes","title":"Visualize classification scheme in web browser — visualize.classcodes","text":"Groups classcodes object visualized regular expressions default web browser. visualization give details group names, conditions weights might useful understanding classification scheme use, creation debugging .","code":""},{"path":"https://docs.ropensci.org/coder/reference/visualize.classcodes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualize classification scheme in web browser — visualize.classcodes","text":"","code":"visualize.classcodes(x, group = NULL, show = TRUE, ...)"},{"path":"https://docs.ropensci.org/coder/reference/visualize.classcodes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualize classification scheme in web browser — visualize.classcodes","text":"x classcodes object name object included package (see all_classcodes()). group names (character vector) groups visualize (subset rownames(x)). (groups NULL.) show visualization shown default web browser. Set FALSE just retrieve URL later use. ... Arguments passed set_classcodes regex name column regular expressions use classification. NULL (default) uses attr(obj, \"regexpr\")[1].","code":""},{"path":"https://docs.ropensci.org/coder/reference/visualize.classcodes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Visualize classification scheme in web browser — visualize.classcodes","text":"URL website visualization (invisible)","code":""},{"path":[]},{"path":"https://docs.ropensci.org/coder/reference/visualize.classcodes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Visualize classification scheme in web browser — visualize.classcodes","text":"","code":"# The default behavior is to open a visualization in the default web browser if (FALSE) { # \\dontrun{   # How is depression classified according to Elixhauser?  visualize(\"elixhauser\", \"depression\")   # Compare the two diabetes groups according to Charlson  visualize(\"charlson\",    c(\"diabetes without complication\", \"diabetes complication\"))   # Is this different from the \"Royal College of Surgeons classification?  # Yes, there is only one group for diabetes  visualize(\"charlson\",    c(\"diabetes without complication\", \"diabetes complication\"),    regex = \"rcs\"  )   # Show all groups from Charlson  visualize(\"charlson\")   # It is also possible to visualize an arbitrary regular expression  # from a character string  visualize(\"I2([12]|52)\") } # }   # The URL is always returned (invisable) but the visual display can  # also be omitted url <- visualize(\"hip_ae\", show = FALSE) #> Error in UseMethod(\"visualize\"): no applicable method for 'visualize' applied to an object of class \"character\" url #> function (description, open = \"\", blocking = TRUE, encoding = getOption(\"encoding\"),  #>     method = getOption(\"url.method\", \"default\"), headers = NULL)  #> { #>     method <- match.arg(method, c(\"default\", \"internal\", \"libcurl\",  #>         \"wininet\")) #>     if (!is.null(headers)) { #>         nh <- names(headers) #>         if (length(nh) != length(headers) || any(nh == \"\") ||  #>             anyNA(headers) || anyNA(nh))  #>             stop(\"'headers' must have names and must not be NA\") #>         headers <- paste0(nh, \": \", headers) #>         headers <- list(headers, paste0(headers, \"\\r\\n\", collapse = \"\")) #>     } #>     .Internal(url(description, open, blocking, encoding, method,  #>         headers)) #> } #> <bytecode: 0x116ed7500> #> <environment: namespace:base>"},{"path":"https://docs.ropensci.org/coder/news/index.html","id":"coder-10","dir":"Changelog","previous_headings":"","what":"coder 1.0","title":"coder 1.0","text":"Added Swedish Charlson version (ICD-10) based article Ludvigsson et al. (2021).","code":""},{"path":"https://docs.ropensci.org/coder/news/index.html","id":"coder-0139","dir":"Changelog","previous_headings":"","what":"coder 0.13.9","title":"coder 0.13.9","text":"Small bug fix CRAN checks","code":""},{"path":"https://docs.ropensci.org/coder/news/index.html","id":"coder-0131","dir":"Changelog","previous_headings":"","what":"coder 0.13.1","title":"coder 0.13.1","text":"Release candidate submitted JOSS.","code":""},{"path":"https://docs.ropensci.org/coder/news/index.html","id":"coder-055","dir":"Changelog","previous_headings":"","what":"coder 0.5.5","title":"coder 0.5.5","text":"Include Walraven score Elixhauser comorbidity index","code":""},{"path":"https://docs.ropensci.org/coder/news/index.html","id":"coder-0539000","dir":"Changelog","previous_headings":"","what":"coder 0.5.3.9000","title":"coder 0.5.3.9000","text":"Include method summary.classcodes (#39)","code":""},{"path":"https://docs.ropensci.org/coder/news/index.html","id":"coder-0529000","dir":"Changelog","previous_headings":"","what":"coder 0.5.2.9000","title":"coder 0.5.2.9000","text":"Internal changes .","code":""}]
